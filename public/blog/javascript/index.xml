<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Javascript on KALPESH MEHTA</title>
    <link>http://localhost:1313/blog/javascript/</link>
    <description>Recent content in Javascript on KALPESH MEHTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>k@lpe.sh (Kalpesh Mehta)</managingEditor>
    <webMaster>k@lpe.sh (Kalpesh Mehta)</webMaster>
    <copyright>Copyright © 2025 kalpesh mehta</copyright>
    <lastBuildDate>Sat, 01 Jun 2013 22:53:39 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>return false vs preventDefault in javascript</title>
      <link>http://localhost:1313/return-false-vs-preventdefault-in-javascript/</link>
      <pubDate>Sat, 01 Jun 2013 22:53:39 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/return-false-vs-preventdefault-in-javascript/</guid>
      <description>&lt;p&gt;This post will help you to differentiate between javascript’s &lt;em&gt;return false&lt;/em&gt;, &lt;em&gt;preventDefault&lt;/em&gt;, &lt;em&gt;stopPropagation&lt;/em&gt; and &lt;em&gt;stopImmediatePropagation&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The first thing you learn when using javascript is to use &lt;em&gt;return false&lt;/em&gt;. That’s the best thing we think to cancel browser’s default behavior, to stop further execution of an event. If you are using a simple function which returns what you want, then probably you won’t notice anything wrong in using &lt;em&gt;return false&lt;/em&gt;. But when you want event to propagate, &lt;em&gt;return false&lt;/em&gt; will not be helpful and will give unexpected result.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This post will help you to differentiate between javascript’s <em>return false</em>, <em>preventDefault</em>, <em>stopPropagation</em> and <em>stopImmediatePropagation</em>.</p>
<p>The first thing you learn when using javascript is to use <em>return false</em>. That’s the best thing we think to cancel browser’s default behavior, to stop further execution of an event. If you are using a simple function which returns what you want, then probably you won’t notice anything wrong in using <em>return false</em>. But when you want event to propagate, <em>return false</em> will not be helpful and will give unexpected result.</p>
<h2 id="what-is-event-propagation">What is event propagation?</h2>
<p>When a single event, such as a mouse click, if is handled by two or more event handlers defined in various location of the DOM hiearachy, then the event handling starts by executing for individual elements at the lowest level. There are two models of this event propagation, <em>event bubbling</em> and <em>event capturing</em>.</p>
<p><!-- raw HTML omitted -->Event bubbling<!-- raw HTML omitted --> is when an event has more than one event handler and event handling execution starts from <strong>bottom to top</strong> i.e. from individual links to it’s parent element (e.g. form or body or document) having it’s own event handler.</p>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">form</span> <span style="color:#b44">onclick</span><span style="color:#666">=</span><span style="color:#b44">&#34;2ndEvent()&#34;</span>&gt; [  
</span></span><span style="display:flex;"><span> This is a link!  
</span></span><span style="display:flex;"><span> ](#)  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">form</span>&gt;   </span></span></code></pre></div>
<p>On clicking on the link in the above example code, first the hyperlink’s event will be handled, then form’s event will get handled, and at last body’s event will get handled. This is event bubbling, which bubble up from bottom to top.</p>
<p><!-- raw HTML omitted -->Event capturing<!-- raw HTML omitted --> is opposite to event bubbling, where event handling execution starts from <strong>top to bottom</strong>.</p>
<p>If you have such type of architecture, where there are many event handlers for an event, you should not use <em>return false</em> or atleast use it with caution. It can get you in big trouble, as it does <em>preventDefault()</em> and <em>stopPropagation()</em> both and hence never allows further execution of an event.</p>
<h2 id="preventdefault">preventDefault()</h2>
<p>It simply stops the default action of an element. Example, prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, just use <em>e.preventDefault()</em> in the top of the function definition. The reason we put <em>preventDefault()</em> in the first line of function is because, if something goes wrong in the code following the <em>preventDefault()</em>, then also it will not allow link or form to get submitted or do whatever action you want it to do. And hence the link or submit button will get submitted. It will still allow further propagation of the event.</p>
<p>Following example prevents the link from following the URL given in href attribute.<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">div</span>&gt; [Blah](http://ka.lpe.sh/) &lt;/<span style="color:#008000;font-weight:bold">div</span>&gt; &lt;<span style="color:#008000;font-weight:bold">script</span> <span style="color:#b44">type</span><span style="color:#666">=</span><span style="color:#b44">&#34;text/javascript&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      $(<span style="color:#b44">&#34;div a&#34;</span>).click(<span style="color:#a2f;font-weight:bold">function</span>(e){
</span></span><span style="display:flex;"><span>  			e.preventDefault();
</span></span><span style="display:flex;"><span>			});
</span></span><span style="display:flex;"><span>     &lt;/<span style="color:#008000;font-weight:bold">script</span>&gt;  
</span></span><span style="display:flex;"><span>   </span></span></code></pre></div></p>
<h2 id="stoppropagation">stopPropagation()</h2>
<p>



<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">div</span> <span style="color:#b44">onclick</span><span style="color:#666">=</span><span style="color:#b44">&#34;doSomething()&#34;</span>&gt; [Blah](#) &lt;/<span style="color:#008000;font-weight:bold">div</span>&gt;   </span></span></code></pre></div><br>
The above code has two event handlers for hyperlink. If you click on Blah, <em>doSomethingElse()</em> and then <em>doSomething()</em> will get fired.<br>
Now let’s say you want to stop the execution of div’s onclick function i.e. <em>doSomething()</em>, but you want the anchor tag’s onclick to fire when clicking on Blah, then use <em>stopPropagation()</em>.<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>$(<span style="">“</span>div a<span style="">”</span>).click(<span style="color:#a2f;font-weight:bold">function</span> (e) {  
</span></span><span style="display:flex;"><span> alert(<span style="">‘</span>Link is clicked<span style="color:#666">!</span> Sorry div will not get clicked..<span style="">’</span>);  
</span></span><span style="display:flex;"><span> e.stopPropagation();  
</span></span><span style="display:flex;"><span>});</span></span></code></pre></div></p>
<h2 id="stopimmediatepropagation">stopImmediatePropagation()</h2>
<p>If you have multiple event handlers for the event, and you want to stop all other event handlers and current event also from further executing, you should use <em>stopImmediatePropagation()</em>.<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">div</span>&gt; [Blah](#) &lt;/<span style="color:#008000;font-weight:bold">div</span>&gt; &lt;<span style="color:#008000;font-weight:bold">script</span> <span style="color:#b44">type</span><span style="color:#666">=</span><span style="color:#b44">&#34;text/javascript&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      $(<span style="color:#b44">&#34;div a&#34;</span>).click(<span style="color:#a2f;font-weight:bold">function</span> () {
</span></span><span style="display:flex;"><span>         alert(<span style="color:#b44">&#39;Hello!&#39;</span>);
</span></span><span style="display:flex;"><span>      });&lt;/<span style="color:#008000;font-weight:bold">script</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $(&#34;div a&#34;).click(function (e) { alert(&#39;Hi! You can see me&#39;); e.stopImmediatePropagation(); });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $(&#34;div a&#34;).click(function () { alert(&#39;I will never popup :(&#39;); });   
</span></span><span style="display:flex;"><span>   </span></span></code></pre></div></p>
<p>So next time when you use <em>return false</em>, think twice do you really want return false or <em>e.preventDefault()</em> or other methods explained above will well-suited there.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
