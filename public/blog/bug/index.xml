<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Bug on KALPESH MEHTA</title>
    <link>http://localhost:1313/blog/bug/</link>
    <description>Recent content in Bug on KALPESH MEHTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>k@lpe.sh (Kalpesh Mehta)</managingEditor>
    <webMaster>k@lpe.sh (Kalpesh Mehta)</webMaster>
    <copyright>Copyright © 2025 kalpesh mehta</copyright>
    <lastBuildDate>Fri, 04 Sep 2015 05:39:10 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/bug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Magento: Zipcode &#43; 4 tax calculation bug fix</title>
      <link>http://localhost:1313/magento-zipcode--4-tax-calculation-bug-fix/</link>
      <pubDate>Fri, 04 Sep 2015 05:39:10 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-zipcode--4-tax-calculation-bug-fix/</guid>
      <description>&lt;p&gt;Magento bug fix for zipcode + 4 in tax calculation&lt;/p&gt;&#xA;&lt;p&gt;Tax Calculation in Magento has a bug where customer can escape paying tax if they enter zipcode + 4 digit in USA. This is because you import 5 digit zipcodes with their tax rates in Magento admin, so if customer inputs their zipcode in zipcode+4 format their zipcode will not match with the imported one. Importing 5-digit zipcode ending in wildcard (*) does not solve this issue either.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Magento bug fix for zipcode + 4 in tax calculation</p>
<p>Tax Calculation in Magento has a bug where customer can escape paying tax if they enter zipcode + 4 digit in USA. This is because you import 5 digit zipcodes with their tax rates in Magento admin, so if customer inputs their zipcode in zipcode+4 format their zipcode will not match with the imported one. Importing 5-digit zipcode ending in wildcard (*) does not solve this issue either.</p>
<p>Before this fix: If zipcode 90036 collects tax, 90036-1234 does NOT collect tax.</p>
<p>You can fix this bug by adding below code in your custom module:</p>
<p>config.xml<br>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> …  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">&lt;global&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;models&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;tax_resource&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;rewrite&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;calculation&gt;Namespace_Module_Model_Tax_Resource_Calculation&lt;/calculation&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;/rewrite&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;/tax_resource&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;/models&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">&lt;/global&gt;  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">…</span></span></span></code></pre></div></p>
<p>Note that we are rewriting core logic of Tax Calculation. Now create folder structure in your custom module: app/code/local/Namespace/Module/Model/Tax/Resource/Calculation.php and copy below code:</p>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> &lt;?php class Namespace_Module_Model_Tax_Resource_Calculation extends Mage_Tax_Model_Resource_Calculation
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">    protected function _getRates($request)
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">    {
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">        $countryId = $request-&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">getCountryId();  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $regionId = $request-&gt;getRegionId();  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $postcode = $request-&gt;getPostcode();
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> //12 = california, 25 = iowa  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> if($countryId == ‘US’ &amp;amp;&amp;amp; in_array($regionId,array(12,25))) {  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $postcode = substr(trim($request-&gt;getPostcode()),0,5);  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $request-&gt;setPostcode($postcode);  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> }  
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> return parent::_getRates($request);
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> }
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span></span></span></code></pre></div>
<p>Above code will only take first 5 digits from the zipcode if the country is USA and state selected is either California or Iowa. You can change the states as per your requirement, to know what ID relates to different states you can look at the State/Province dropdown source code in checkout page.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento bug Checkout cart 500 error Redirect loops</title>
      <link>http://localhost:1313/magento-bug-checkout-cart-500-error-redirect-loops/</link>
      <pubDate>Sat, 28 Mar 2015 23:52:11 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-bug-checkout-cart-500-error-redirect-loops/</guid>
      <description>&lt;p&gt;Magento checkout cart gives 500 error and redirect loops when there is a shopping cart rule with Category condition.&lt;/p&gt;&#xA;&lt;p&gt;I found a bug in Magento which redirects shopping cart indefinitely causing it 500 internal server error. This can be a serious bug as customer will not able to shop if this happens. I noticed this happens when there is a shopping cart rule which have Category in conditions of the rule.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Magento checkout cart gives 500 error and redirect loops when there is a shopping cart rule with Category condition.</p>
<p>I found a bug in Magento which redirects shopping cart indefinitely causing it 500 internal server error. This can be a serious bug as customer will not able to shop if this happens. I noticed this happens when there is a shopping cart rule which have Category in conditions of the rule.</p>
<p>If total quantity equals or greater than 1 for a subselection of items in cart matching ALL of these conditions:<br>
<strong>Category</strong> is 125</p>
<p>So for example you have a shopping cart rule where you want to give some discount or free product if at least one product is chosen from specific Category, this triggers the error in frontend shopping cart. Main reason here is <strong>Category</strong> condition. If you remove category condition then the error should go away. But if you want to keep the category condition and still want Magento to handle the shopping cart promotion rule, check the code changes below:</p>
<p>To solve this I copied below file to my local<br>
app/code/core/Mage/SalesRule/Model/Rule/Condition/Product/Combine.php</p>
<p>and edited the function validate:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b44;font-style:italic">/**  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * Validate a condition with the checking of the child value  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * @param Varien_Object $object  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> *  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * @return bool  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> */</span>  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">validate</span>(Varien_Object <span style="color:#b8860b">$object</span>)  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> <span style="color:#b44;font-style:italic">/** @var Mage_Catalog_Model_Product $product */</span>  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$product</span> <span style="color:#666">=</span> <span style="color:#b8860b">$object</span><span style="color:#666">-&gt;</span><span style="color:#b44">getProduct</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span> (<span style="color:#666">!</span>(<span style="color:#b8860b">$product</span> instanceof Mage_Catalog_Model_Product)) {  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$product</span> <span style="color:#666">=</span> Mage<span style="color:#666">::</span><span style="color:#b44">getModel</span>(‘catalog<span style="color:#666">/</span>product’)<span style="color:#666">-&gt;</span><span style="color:#b44">load</span>(<span style="color:#b8860b">$object</span><span style="color:#666">-&gt;</span><span style="color:#b44">getProductId</span>());  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$valid</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">parent</span><span style="color:#666">::</span><span style="color:#b44">validate</span>(<span style="color:#b8860b">$object</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#080;font-style:italic">/* Kalpesh commented whole block, as it causes redirect loop and Segmentation fault in apache  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> if (!$valid &amp;amp;&amp;amp; $product-&gt;getTypeId() == Mage_Catalog_Model_Product_Type_Configurable::TYPE_CODE) {  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> $children = $object-&gt;getChildren();  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> //$valid = $children &amp;amp;&amp;amp; $this-&gt;validate($children[0]); //Kalpesh commented, issue….  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> }*/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">return</span> <span style="color:#b8860b">$valid</span>;  
</span></span><span style="display:flex;"><span> }</span></span></code></pre></div></p>
<p>Hope this helps to some troubled souls!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento 2 Security Bug in Customer Address section (Resolved)</title>
      <link>http://localhost:1313/magento-2-security-bug-in-customer-address-section-resolved/</link>
      <pubDate>Sat, 28 Mar 2015 06:31:02 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-2-security-bug-in-customer-address-section-resolved/</guid>
      <description>&lt;p&gt;Magento 2 had a serious security bug where a website user can view and edit any customer’s address very easily. I reported this issue to Magento 2 team and they quickly fixed it and rolled it out in new beta version. All the beta versions up to &lt;strong&gt;0.42.0-beta11&lt;/strong&gt; were affected, and from &lt;strong&gt;0.74.0-beta1&lt;/strong&gt; it is fixed (I have not tested it yet).&lt;/p&gt;&#xA;&lt;p&gt;Details about the bug and progress: &lt;a href=&#34;https://github.com/magento/magento2/issues/1107&#34;&gt;https://github.com/magento/magento2/issues/1107&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you are using the affected Magento 2 versions for online demo or development please upgrade it. Though people use fake address in Demo stores, it is likely that some of them could have used their real address and details which can be accessible by anyone who knows about this bug.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Magento 2 had a serious security bug where a website user can view and edit any customer’s address very easily. I reported this issue to Magento 2 team and they quickly fixed it and rolled it out in new beta version. All the beta versions up to <strong>0.42.0-beta11</strong> were affected, and from <strong>0.74.0-beta1</strong> it is fixed (I have not tested it yet).</p>
<p>Details about the bug and progress: <a href="https://github.com/magento/magento2/issues/1107">https://github.com/magento/magento2/issues/1107</a></p>
<p>If you are using the affected Magento 2 versions for online demo or development please upgrade it. Though people use fake address in Demo stores, it is likely that some of them could have used their real address and details which can be accessible by anyone who knows about this bug.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento EE 1.14 &amp;#8211; Broken category &amp;#038; product sitemap URLs</title>
      <link>http://localhost:1313/magento-ee-1.14-%238211-broken-category-%23038-product-sitemap-urls/</link>
      <pubDate>Sat, 28 Mar 2015 04:40:23 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-ee-1.14-%238211-broken-category-%23038-product-sitemap-urls/</guid>
      <description>&lt;p&gt;Magento EE 1.14 introduces a bug fix which apparently becomes a bug in our website. &lt;a href=&#34;http://www.magentocommerce.com/knowledge-base/entry/ee114-later-release-notes#ee114-1400fixes-other&#34;&gt;Magento EE 1.14.0.0 Release Notes&lt;/a&gt; and &lt;a href=&#34;http://www.magentocommerce.com/knowledge-base/entry/ce19-later-release-notes#ce19-1900fixes-other&#34;&gt;Magento CE 1.9.0.0 Release Notes&lt;/a&gt; lists this in it’s Bug Fixes:&lt;br&gt;&#xA;&lt;em&gt;Google Sitemap files now include the .html suffix for category and product URLs.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We don’t have .html suffix in our category and product URLs, so we were good before this fix. But after upgrading it to latest version all the category and product URLs were having “.” (dot) at the end in XML sitemap. This is because Magento allows admin to give a custom suffix for category and product URLs for sitemap, but hardcodes “.” regardless of there are values in the above config fields or not. This allows unnecessary dots in all the URLs which can lead to 404 pages.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Magento EE 1.14 introduces a bug fix which apparently becomes a bug in our website. <a href="http://www.magentocommerce.com/knowledge-base/entry/ee114-later-release-notes#ee114-1400fixes-other">Magento EE 1.14.0.0 Release Notes</a> and <a href="http://www.magentocommerce.com/knowledge-base/entry/ce19-later-release-notes#ce19-1900fixes-other">Magento CE 1.9.0.0 Release Notes</a> lists this in it’s Bug Fixes:<br>
<em>Google Sitemap files now include the .html suffix for category and product URLs.</em></p>
<p>We don’t have .html suffix in our category and product URLs, so we were good before this fix. But after upgrading it to latest version all the category and product URLs were having “.” (dot) at the end in XML sitemap. This is because Magento allows admin to give a custom suffix for category and product URLs for sitemap, but hardcodes “.” regardless of there are values in the above config fields or not. This allows unnecessary dots in all the URLs which can lead to 404 pages.</p>
<p><a href="http://ka.lpe.sh/wp-content/uploads/2015/03/Screen-Shot-2015-03-27-at-9.24.08-PM.png"><img src="http://ka.lpe.sh/wp-content/uploads/2015/03/Screen-Shot-2015-03-27-at-9.24.08-PM.png" alt="Magento Category Product URL config"></a></p>
<p>Magento team have used observer to observe the events <em>sitemap_categories_generating_before</em> and <em>sitemap_products_generating_before</em> to add the suffix in the following file and functions (Notice I have commented all lines in the functions):<br>
app/code/core/Enterprise/Catalog/Model/Observer.php<br>
(copy this file to app/code/local/Enterprise/Catalog/Model/Observer.php, you may have to create directories)<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b44;font-style:italic">/**  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * Add Seo suffix to category’s URL if doesn’t exists.  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> *  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * @param Varien_Event_Observer $observer  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> */</span>  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">addSeoSuffixToCategoryUrl</span>(Varien_Event_Observer <span style="color:#b8860b">$observer</span>)  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> <span style="color:#080;font-style:italic">/*$seoSuffix = (string) Mage::app()-&gt;getStore()-&gt;getConfig(  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> Mage_Catalog_Helper_Category::XML_PATH_CATEGORY_URL_SUFFIX  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> );  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> $this-&gt;_addSuffixToUrl($observer-&gt;getCollection()-&gt;getItems(), $seoSuffix);*/</span>  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#b44;font-style:italic">/**  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * Add Seo suffix to product’s URL if doesn’t exists.  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> *  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> * @param Varien_Event_Observer $observer  
</span></span></span><span style="display:flex;"><span><span style="color:#b44;font-style:italic"> */</span>  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">addSeoSuffixToProductUrl</span>(Varien_Event_Observer <span style="color:#b8860b">$observer</span>)  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> <span style="color:#080;font-style:italic">/*$seoSuffix = (string) Mage::app()-&gt;getStore()-&gt;getConfig(  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> Mage_Catalog_Helper_Product::XML_PATH_PRODUCT_URL_SUFFIX  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> );  
</span></span></span><span style="display:flex;"><span><span style="color:#080;font-style:italic"> $this-&gt;_addSuffixToUrl($observer-&gt;getCollection()-&gt;getItems(), $seoSuffix);*/</span>  
</span></span><span style="display:flex;"><span> }</span></span></code></pre></div></p>
<p>After commenting above function’s logic and generating the Google Sitemap again (Admin &gt; Catalog &gt; Google Sitemap) everything was normal (no dot and suffix in URLs)</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento bug: Incorrect sales order report during DST</title>
      <link>http://localhost:1313/magento-bug-incorrect-sales-order-report-during-dst/</link>
      <pubDate>Fri, 20 Mar 2015 02:49:19 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-bug-incorrect-sales-order-report-during-dst/</guid>
      <description>&lt;p&gt;Before 6 months I found a bug in Magento CE 1.9 and EE 1.13 (latest versions at that time) in Sales Order report calculation during Daylight Savings Time period. I reported it to Magento through their Bug Tracking ticket but after 6 months also there is no reply no progress on that issue. I provided all the details on how to reproduce it and also provided solution to fix the issue. The issue is not yet resolved in latest Magento versions (I have checked Enterprise Edition 1.14.1.0 which is latest stable version now) so I decided to post it online so that other developers/clients who are experiencing same issue during DST (which have started) period can fix it and fetch correct numbers.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Before 6 months I found a bug in Magento CE 1.9 and EE 1.13 (latest versions at that time) in Sales Order report calculation during Daylight Savings Time period. I reported it to Magento through their Bug Tracking ticket but after 6 months also there is no reply no progress on that issue. I provided all the details on how to reproduce it and also provided solution to fix the issue. The issue is not yet resolved in latest Magento versions (I have checked Enterprise Edition 1.14.1.0 which is latest stable version now) so I decided to post it online so that other developers/clients who are experiencing same issue during DST (which have started) period can fix it and fetch correct numbers.</p>
<p>Ticket in Magento bug tracker (you would need to login to see):<br>
<a href="http://www.magentocommerce.com/bug-tracking/issue/index/id/254">http://www.magentocommerce.com/bug-tracking/issue/index/id/254</a></p>
<p><strong>Overview of issue:</strong><br>
Sales order grid data (Admin-&gt;Sales-&gt;Orders) for certain date range is not matching with the report sales order data (Admin-&gt;Reports-&gt;Sales-&gt;Orders). There is some difference in numbers which made me drill into the Magento source code. Upon further investigation I saw Zend_Date’s set method was used without 2nd argument which took the date in wrong format messing with the totals.</p>
<p><strong>Steps to reproduce:</strong><br>
1. Login in Admin panel<br>
2. Go to Reports-&gt;Sales-&gt;Orders screen<br>
3. Filter orders for some date range which should fall in Daylight savings time.<br>
4. Notice the totals which are shown are not 100% correct.</p>
<p><strong>Expected Result:</strong><br>
The totals in Reports-&gt;Sales-&gt;Orders screen should match totals in Sales-&gt;Orders grid screen when downloading CSV from there. I have attached the issue in detail along with solution in the attached file.</p>
<p><strong>Actual Result:</strong><br>
The totals in Reports-&gt;Sales-&gt;Orders screen is not coming correct when date range filter falls in daylight savings time.</p>
<p><strong>Magento version affected:</strong><br>
It seems all CE and EE versions, I only checked CE 1.8, 1.9 and EE 1.13, 1.14</p>
<p><strong>Files Affected:</strong><br>
app/code/core/Mage/Reports/Model/Resource/Report/Abstract.php<br>
app/code/core/Mage/Reports/Model/Mysql4/Report/Abstract.php (In older magento versions using Mysql4 instead of Resource)</p>
<p><strong>Technical Details:</strong><br>
In the file app/code/core/Mage/Reports/Model/Resource/Report/Abstract.php<br>
function: _getTZOffsetTransitions<br>
line 418, $dateTimeObject-&gt;set($tr[‘time’]);</p>
<p>$dateTimeObject is object of Zend_Date() and expects parameter 2 for the date/time format<br>
<a href="http://framework.zend.com/manual/1.11/en/zend.date.basic.html#zend.date.simple.functions.set">http://framework.zend.com/manual/1.11/en/zend.date.basic.html#zend.date.simple.functions.set</a></p>
<p>After changing this line:<br>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $dateTimeObject-&gt;set($tr[‘time’]);</span></span></span></code></pre></div><br>
with<br>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"> $dateTimeObject-&gt;set($tr[‘time’], Varien_Date::DATETIME_INTERNAL_FORMAT);</span></span></span></code></pre></div></p>
<p>the issue was fixed and the order totals were shown correctly in Reports-&gt;Sales-&gt;Order screen.</p>
<p><strong>Important Note:</strong> After the above change it is required to re-build lifetime statistics of Orders to update database table sales_order_aggregated_created.</p>
<p>Make the change by copying the core file to your local so that future upgrade will not overwrite your fix.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
