<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Interview on KALPESH MEHTA</title>
    <link>http://localhost:1313/blog/interview/</link>
    <description>Recent content in Interview on KALPESH MEHTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>k@lpe.sh (Kalpesh Mehta)</managingEditor>
    <webMaster>k@lpe.sh (Kalpesh Mehta)</webMaster>
    <copyright>Copyright ¬© 2025 kalpesh mehta</copyright>
    <lastBuildDate>Fri, 04 Jan 2013 11:28:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Magento Certification Preparation / Interview Questions Answers</title>
      <link>http://localhost:1313/magento-certification-preparation-/-interview-questions-answers/</link>
      <pubDate>Fri, 04 Jan 2013 11:28:05 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-certification-preparation-/-interview-questions-answers/</guid>
      <description>&lt;p&gt;Hi guys, here is the stuff I collected and created from myriad number of websites/blogs/forums/ magento source codebase during my Magento certification preparation. I have put all the things I found and studied during my preparation in one place, so that other developers who are preparing for the exam can benefit from it.&lt;/p&gt;&#xA;&lt;p&gt;Credits to all who have contributed these things over the web from where I copied for study purpose. Few credits to me as well as I also have contributed many things in it üôÇ This may contain errors and wrong information and I don‚Äôt guarantee it to be completely correct. But this should be a good resource if you want a heads up! Please be aware that you need to go through the study guide and fundamental videos yourself in order to pass this exam.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Hi guys, here is the stuff I collected and created from myriad number of websites/blogs/forums/ magento source codebase during my Magento certification preparation. I have put all the things I found and studied during my preparation in one place, so that other developers who are preparing for the exam can benefit from it.</p>
<p>Credits to all who have contributed these things over the web from where I copied for study purpose. Few credits to me as well as I also have contributed many things in it üôÇ This may contain errors and wrong information and I don‚Äôt guarantee it to be completely correct. But this should be a good resource if you want a heads up! Please be aware that you need to go through the study guide and fundamental videos yourself in order to pass this exam.</p>
<p><em>If you are here to prepare for Interview, then I would recommend you to also go through these links:</em><br>
<a href="http://ka.lpe.sh/2012/07/19/magento-interview-questions-and-answers/" title="Magento Interview questions and answers">Magento Interview questions and answers</a><br>
<a href="http://ka.lpe.sh/2012/01/29/magento-advanced-interview-questions/" title="Magento Advanced Interview questions">Magento Advanced Interview questions/</a></p>
<p>The below stuff alone will definitely not going to help you much in passing the exam. Not to mention, these resource can also be used for Magento interview preparation.</p>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>Magento supports and loads translations in the following order:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì Module Translation CSV in /app/locale  
</span></span><span style="display:flex;"><span> ‚Äì Theme Translation CSV in /app/design/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">area</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">area</span>&gt;/&lt;<span style="color:#008000;font-weight:bold">package</span>&gt;/&lt;<span style="color:#008000;font-weight:bold">theme</span>&gt;/locale (theme folder translate)  
</span></span><span style="display:flex;"><span> ‚Äì DB Translation Database (table core_translate) ‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>How many options exist to add a custom translation for any given string?
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> As mentioned above, there are three options in Magento to add a custom translation to a text string: module translation, theme translation and inline translation.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 1. Module translation
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Module translations are stored in app/locale/languagecode_COUNTRYCODE/ folder in form of csv files, named as Namespace_Modulename.csv All string in extensions that are inside __() method can be translated this way
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 2. Theme translation
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Strings can be translated inside your theme, for that you just need to set locale via Magento admin area, then create translate.csv in app/design/frontend/&lt;<span style="color:#008000;font-weight:bold">package</span>&gt;/&lt;<span style="color:#008000;font-weight:bold">theme</span>&gt;/locale/ languagecode_COUNTRYCODE and put your translated strings inside this CSV  
</span></span><span style="display:flex;"><span> ‚ÄúMy Cart‚Äù,‚ÄùMy Basket‚Äù  
</span></span><span style="display:flex;"><span> ‚ÄúMy Account‚Äù,‚ÄùAccount‚Äù&lt;/<span style="color:#008000;font-weight:bold">theme</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">package</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 3. Inline translation
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To enable inline translation you need to log into Admin panel and go to System -&gt; Configuration -&gt; Developer.  
</span></span><span style="display:flex;"><span> You need to select Store view from scope select and enable inline translation for this desired store view there.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Magento uses the Front Controller pattern for the following purposes:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Receiving and processing browser data, transferring it to other system elements;  
</span></span><span style="display:flex;"><span> Defining controller and proper action to perform using routes;  
</span></span><span style="display:flex;"><span> Displaying browser-requested data using blocks, templates and model data.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(Front Controller) Routes processing order
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì admin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì standard
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì cms
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì default  
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Mage::getModel() =&gt; getModelInstance() =&gt; getModelClassName() =&gt; new ClassNameInitializes‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage :: getModel($modelClass, $arguments){  
</span></span><span style="display:flex;"><span> Mage_Core_Model_Config :: getModelInstance($modelClass, $arguments){  
</span></span><span style="display:flex;"><span> $className = $this-&gt;getModelClassName($modelClass){  
</span></span><span style="display:flex;"><span> return $this-&gt;getGroupedClassName(‚Äòmodel‚Äô, $modelClass)  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> ‚Ä¶  
</span></span><span style="display:flex;"><span> $obj = new $className($arguments);  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Front Controller events‚Ä¶ Mage_Core_Controller_Varien_Front
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>controller_front_init_before  
</span></span><span style="display:flex;"><span>controller_front_init_routers  
</span></span><span style="display:flex;"><span>controller_front_send_response_before  
</span></span><span style="display:flex;"><span>controller_front_send_response_after
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Mage_Core_Controller_Varien_Action fires events‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>controller_action_layout_load_before  
</span></span><span style="display:flex;"><span>controller_action_layout_generate_xml_before  
</span></span><span style="display:flex;"><span>controller_action_layout_generate_blocks_before  
</span></span><span style="display:flex;"><span>controller_action_layout_generate_blocks_after  
</span></span><span style="display:flex;"><span>controller_action_layout_render_before  
</span></span><span style="display:flex;"><span>controller_action_layout_render_before_{getFullActionName}  
</span></span><span style="display:flex;"><span>controller_action_predispatch  
</span></span><span style="display:flex;"><span>controller_action_predispatch_{getRouteName}  
</span></span><span style="display:flex;"><span>controller_action_predispatch_{getFullActionName}  
</span></span><span style="display:flex;"><span>controller_action_postdispatch  
</span></span><span style="display:flex;"><span>controller_action_postdispatch_{getFullActionName}  
</span></span><span style="display:flex;"><span>controller_action_postdispatch_{getRouteName}  
</span></span><span style="display:flex;"><span>controller_action_noroute  
</span></span><span style="display:flex;"><span>controller_action_nocookies
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>http://blog.belvg.com/magento-front-controller-pattern.html  
</span></span><span style="display:flex;"><span>http://magebase.com/magento-tutorials/digging-deeper-into-magentos-layout-xml-part-2/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>The layout initialization happens as follows:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 1. Instances of the Layout and Layout Update are created.  
</span></span><span style="display:flex;"><span> 2. Layout handles are added according to the $handles argument if passed.  
</span></span><span style="display:flex;"><span> 3. Store layout handle STORE_[store_code] is added to the Layout Update Instance. For example, if code of current store is en, then layout handle STORE_en is added.  
</span></span><span style="display:flex;"><span> 4. Theme layout handle THEME_[area]_[package]_[layout_theme] is added to the Layout Update Instance. For example, if the page rendered is for the frontend area, the current theme package name is magebase and theme name for layout is modern, then the layout handle THEME_frontend_magebase_modern is added.  
</span></span><span style="display:flex;"><span> 5. Action layout handle is added to the Layout Update Instance. For example, if the page rendered is a category detail page, then Magento is executing catalog module‚Äôs category controller‚Äôs view action. So it will add an action handle catalog_category_view.  
</span></span><span style="display:flex;"><span> 6. All Layout XML files defined for all active modules are loaded  
</span></span><span style="display:flex;"><span> 7. If a layout file named local.xml exists in the current theme‚Äôs layout folder, it is loaded last  
</span></span><span style="display:flex;"><span> 8. Layout updates of all added layout handles from the loaded layout XML are merged  
</span></span><span style="display:flex;"><span> 9. Layout updates of all added layout handles from the database are merged  
</span></span><span style="display:flex;"><span> 10. If the $generateXML argument of loadLayout() method is passed as false, the initialization is finished.  
</span></span><span style="display:flex;"><span> 11. The layout update data is refined by removing all blocks and block references defined with the remove tag. (As discussed in Part 1)  
</span></span><span style="display:flex;"><span> 12. If $generateBlocks argument is passed as false, the initialization is finished.  
</span></span><span style="display:flex;"><span> 13. The instances of block classes are created according to the block definitions in the Layout XML  
</span></span><span style="display:flex;"><span> 14. The methods are called with specified arguments on the blocks where action tags are defined. (As discussed in Part 1)  
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A layout should have at least one *output* block. Normally, the root block is the only output block in a layout but there can be multiple output blocks for a single page. In that case, the output of each output block is merged and returned in the response.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The *non-output* blocks are child blocks of output blocks and are normally rendered with the getChildHtml() method. There are also two other methods: getChildChildHtml() and getBlockHtml() also used to render non-output blocks.  
</span></span><span style="display:flex;"><span>‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Blocks can be instantiated via layout xml (&lt;<span style="color:#008000;font-weight:bold">block</span> <span style="color:#b44">addblock</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">after</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">and</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">config</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">createblock</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">crontab</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">file</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">finally</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">for</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">getblock</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">in</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">initialization</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">invokes</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">located</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">mage_core_model_layout</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">mage_cron_model_observer-</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">magento</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">methods</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">of</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">section</span><span style="color:#666">=</span><span style="color:#b44">&#34;&#34;</span> <span style="color:#b44">type</span><span style="color:#666">=</span><span style="color:#b44">&#34;‚ÄùgroupName/setup‚Äù‚Ä¶),&#34;</span>&gt;dipatch() that does the following:&lt;/<span style="color:#008000;font-weight:bold">block</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Process scheduled cron queue: Magento reads the cron schedule table for jobs that need to be executed this very second and jobs that should have already been executed, i.e. with timestamps in the past, that haven‚Äôt expired. The expiry limit is also a parameter, configurable in the admin panel. After all the work, dispatch method calls two generate() and cleanup() methods
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Generate tasks schedule: Mage_Cron_Model_Observer-&gt;generate(), this method searches final configuration file for content of &lt;<span style="color:#008000;font-weight:bold">crontab</span>&gt; nodes ($config = Mage::getConfig()-&gt;getNode(‚Äòcrontab/jobs‚Äô); ), reading &lt;<span style="color:#008000;font-weight:bold">schedule</span>&gt;&lt;<span style="color:#008000;font-weight:bold">cron_expr</span>&gt; elements to find out when and how often they need to be executed and pulls this data into the cron_schedule table.&lt;/<span style="color:#008000;font-weight:bold">cron_expr</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">schedule</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">crontab</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Cleanup: Mage_Cron_Model_Observer-&gt;cleanup(), this method deletes completed (with ‚Äòsuccess‚Äô status) or missed ($time <span style="">&lt;</span> $now ‚Äì $scheduleLifetime, where $scheduleLifetime are set in Magento admin area) jobs from cron_schedule DB table. ------- 1. All .xml files are collected into one big simpleXmlElement object 2. First, data is loaded from app/etc/*.xml and then from app/etc/modules/*.xml. Based on the module loaded information, config.xml is loaded from the etc directory of the module. If we load backend to check ACL and build menu elements, adminhtml.xml and system.xml are loaded as well. Configuration data from the database is the last one to load. 3. Any parameters, except the ones stored in app/etc/local.xml, can be overridden in config.xml of a custom module. P.S. Even though Magento provides us with such convenient methods as Mage:: getStoreConfig() and Mage:: getStoreConfigFlag(), we can reach any element of the configuration tree with the help of Mage::getConfig()-&gt;getNode($path, $scope, $scopeCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Difference: A Website, a Store and a Store View.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Each websites has its unique customer and order base, base currency and prices.  
</span></span><span style="display:flex;"><span> Stores can be used to define for example different (looking) stores with the same information.  
</span></span><span style="display:flex;"><span> Store Views are mostly used to handle different languages on your website. You will typically have one Store View per language.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Setting And Getting Cookies
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To set cookies:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::getModel(‚Äòcore/cookie‚Äô)-&gt;set(‚Äòcookie_name‚Äô, ‚Äòcookie_value‚Äô, 0); # session cookie  
</span></span><span style="display:flex;"><span> Mage::getModel(‚Äòcore/cookie‚Äô)-&gt;set(‚Äòcookie_name‚Äô, ‚Äòcookie_value‚Äô, 60); #lasts 60 seconds
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To get cookies:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::getModel(‚Äòcore/cookie‚Äô)-&gt;get(‚Äòmade_productalerts_stock‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Sending Transactional E-Mails
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $email = Mage::getModel(‚Äòcore/email_template‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $email-&gt;sendTransactional(  
</span></span><span style="display:flex;"><span> ‚Äòsome_email_template‚Äô, // template  
</span></span><span style="display:flex;"><span> array(‚Äòname‚Äô =&gt; ‚ÄòYour Company‚Äô, ‚Äôemail‚Äô =&gt; ‚Äòcontact@yourcompany.com‚Äô), // sender details  
</span></span><span style="display:flex;"><span> ‚Äòjoe@joebloggs.com‚Äô, // recipient email  
</span></span><span style="display:flex;"><span> ‚ÄòJoe Bloggs‚Äô, // recipient name  
</span></span><span style="display:flex;"><span> array(‚ÄòcustomerName‚Äô =&gt; ‚ÄòJoe Bloggs‚Äô), // merge vars  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getStore()-&gt;getStoreId() // store id  
</span></span><span style="display:flex;"><span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Resizing A Product Image
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $helper = Mage::helper(‚Äòcatalog/image‚Äô);  
</span></span><span style="display:flex;"><span> $helper-&gt;init($product, ‚Äòimage‚Äô);  
</span></span><span style="display:flex;"><span> $helper-&gt;resize(216, 161);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Adding A Layout Handle From A Controller
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> If you really need to add a handle to a controller, you need to replace the call to $this-&gt;loadLayout() with:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $update = $this-&gt;getLayout()-&gt;getUpdate();  
</span></span><span style="display:flex;"><span> $update-&gt;addHandle(‚Äòdefault‚Äô);  
</span></span><span style="display:flex;"><span> $this-&gt;addActionLayoutHandles();  
</span></span><span style="display:flex;"><span> $update-&gt;addHandle(‚Äòyour_handle‚Äô);  
</span></span><span style="display:flex;"><span> $this-&gt;loadLayoutUpdates();  
</span></span><span style="display:flex;"><span> $this-&gt;generateLayoutXml();  
</span></span><span style="display:flex;"><span> $this-&gt;generateLayoutBlocks();  
</span></span><span style="display:flex;"><span> $this-&gt;_isLayoutLoaded = true;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Config URL Rewrite Definition
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> xpath: global/rewrite/module/from<span style="color:#999;font-weight:bold">&amp;amp;</span>to  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">rewrite</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">namespace_module</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">from</span>&gt;<span style="color:#080">&lt;![CDATA[#^/some/regex/([a-z]*/?$#]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">from</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">to</span>&gt;<span style="color:#080">&lt;![CDATA[/frontname/whatever/whatever/blah/$1]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">to</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">namespace_module</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">rewrite</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Config Model Rewrite Definition
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> xpath: global/models/catalog/rewrite/product  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">models</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">catalog</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">rewrite</span>&gt; &lt;<span style="color:#008000;font-weight:bold">product</span>&gt;Namespace_Module_Catalog_Product&lt;/<span style="color:#008000;font-weight:bold">product</span>&gt; &lt;/<span style="color:#008000;font-weight:bold">rewrite</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">catalog</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">models</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Overriding A Controller
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> xpath: frontend/routers/checkout/args/modules/  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">frontend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">routers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">checkout</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">args</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">modules</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">your_module</span> <span style="color:#b44">before</span><span style="color:#666">=</span><span style="color:#b44">&#34;Mage_Checkout&#34;</span>&gt;Your_Module_Checkout&lt;/<span style="color:#008000;font-weight:bold">your_module</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">modules</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">args</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">checkout</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">routers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">frontend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Config Transactional Email Template Definition
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">template</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">email</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">your_module_email_something_template</span> <span style="color:#b44">module</span><span style="color:#666">=</span><span style="color:#b44">&#34;namespace_module&#34;</span> <span style="color:#b44">translate</span><span style="color:#666">=</span><span style="color:#b44">&#34;label&#34;</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">label</span>&gt;Something&lt;/<span style="color:#008000;font-weight:bold">label</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">file</span>&gt;namespace/module/something.html&lt;/<span style="color:#008000;font-weight:bold">file</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">type</span>&gt;html&lt;/<span style="color:#008000;font-weight:bold">type</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">your_module_email_something_template</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">email</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">template</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Block Caching
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To cache a block individually, add this method to the blocks class:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> protected function _construct()  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> $this-&gt;addData(array(  
</span></span><span style="display:flex;"><span> ‚Äòcache_lifetime‚Äô =&gt; 3600,  
</span></span><span style="display:flex;"><span> ‚Äòcache_tags‚Äô =&gt; array(Mage_Cms_Model_Block::CACHE_TAG),  
</span></span><span style="display:flex;"><span> ‚Äòcache_key‚Äô =&gt; ‚ÄòCACHE_KEY‚Äô,  
</span></span><span style="display:flex;"><span> ));  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>Config Two-Level Memcached <span style="color:#999;font-weight:bold">&amp;amp;</span> DB Definition
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">cache</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">backend</span>&gt;memcached&lt;/<span style="color:#008000;font-weight:bold">backend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">slow_backend</span>&gt;database&lt;/<span style="color:#008000;font-weight:bold">slow_backend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">id_prefix</span>&gt;cache_&lt;/<span style="color:#008000;font-weight:bold">id_prefix</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">memcached</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">servers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">server1</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">host</span>&gt;<span style="color:#080">&lt;![CDATA[localhost]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">host</span>&gt; &lt;<span style="color:#008000;font-weight:bold">port</span>&gt;<span style="color:#080">&lt;![CDATA[11211]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">port</span>&gt; &lt;<span style="color:#008000;font-weight:bold">persistent</span>&gt;<span style="color:#080">&lt;![CDATA[0]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">persistent</span>&gt; &lt;<span style="color:#008000;font-weight:bold">weight</span>&gt;<span style="color:#080">&lt;![CDATA[1]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">weight</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">timeout</span>&gt;<span style="color:#080">&lt;![CDATA[60]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">timeout</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">retry_interval</span>&gt;<span style="color:#080">&lt;![CDATA[10]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">retry_interval</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">server1</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">servers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">compression</span>&gt;<span style="color:#080">&lt;![CDATA[0]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">compression</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">cache_dir</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">cache_dir</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">hashed_directory_level</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">hashed_directory_level</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">hashed_directory_umask</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">hashed_directory_umask</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">file_name_prefix</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">file_name_prefix</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">memcached</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">cache</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">full_page_cache</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">backend</span>&gt;memcached&lt;/<span style="color:#008000;font-weight:bold">backend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">slow_backend</span>&gt;database&lt;/<span style="color:#008000;font-weight:bold">slow_backend</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">id_prefix</span>&gt;fullpagecache_&lt;/<span style="color:#008000;font-weight:bold">id_prefix</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">memcached</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">servers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">server1</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">host</span>&gt;<span style="color:#080">&lt;![CDATA[localhost]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">host</span>&gt; &lt;<span style="color:#008000;font-weight:bold">port</span>&gt;<span style="color:#080">&lt;![CDATA[11211]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">port</span>&gt; &lt;<span style="color:#008000;font-weight:bold">persistent</span>&gt;<span style="color:#080">&lt;![CDATA[0]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">persistent</span>&gt; &lt;<span style="color:#008000;font-weight:bold">weight</span>&gt;<span style="color:#080">&lt;![CDATA[1]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">weight</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">timeout</span>&gt;<span style="color:#080">&lt;![CDATA[60]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">timeout</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">retry_interval</span>&gt;<span style="color:#080">&lt;![CDATA[10]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">retry_interval</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">server1</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">servers</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">compression</span>&gt;<span style="color:#080">&lt;![CDATA[0]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">compression</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">cache_dir</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">cache_dir</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">hashed_directory_level</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">hashed_directory_level</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">hashed_directory_umask</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">hashed_directory_umask</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">file_name_prefix</span>&gt;<span style="color:#080">&lt;![CDATA[]]&gt;</span>&lt;/<span style="color:#008000;font-weight:bold">file_name_prefix</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">memcached</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">full_page_cache</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>Add comment to form input in admin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $afterElementHtml = ‚Äò
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#008000;font-weight:bold">small</span>&gt;‚Äò . ‚Äò this is the hint! ‚Äò . ‚Äò&lt;/<span style="color:#008000;font-weight:bold">small</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äò;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $linkFieldset-&gt;addField(‚Äòfield_name‚Äô, ‚Äòtext‚Äô, array(  
</span></span><span style="display:flex;"><span> ‚Äòafter_element_html‚Äô =&gt; $afterElementHtml,  
</span></span><span style="display:flex;"><span> ));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>Category Product Collection
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> This snippet provides a collection of products within a category
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $cat = Mage::getModel(‚Äòcatalog/category‚Äô)-&gt;load(1);  
</span></span><span style="display:flex;"><span> $coll = Mage::getResourceModel(‚Äòcatalog/product_collection‚Äô);  
</span></span><span style="display:flex;"><span> $coll-&gt;addCategoryFilter($cat);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Adding BreadCrumbs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Via code (usually in a controller):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $crumbs = Mage::app()-&gt;getLayout-&gt;getBlock(‚Äòbreadcrumbs‚Äô);  
</span></span><span style="display:flex;"><span> $crumbs-&gt;addCrumb(‚Äòhome‚Äô, array(  
</span></span><span style="display:flex;"><span> ‚Äòlabel‚Äô =&gt; ‚ÄòHome‚Äô,  
</span></span><span style="display:flex;"><span> ‚Äòtitle‚Äô =&gt; ‚ÄòGo to Home Page‚Äô,  
</span></span><span style="display:flex;"><span> ‚Äòlink‚Äô =&gt; Mage::getUrl(‚Äù)  
</span></span><span style="display:flex;"><span> ));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Via Layout XML:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">reference</span> <span style="color:#b44">name</span><span style="color:#666">=</span><span style="color:#b44">&#34;breadcrumbs&#34;</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addCrumb&#34;</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">crumbname</span>&gt;Home&lt;/<span style="color:#008000;font-weight:bold">crumbname</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">crumbinfo</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">label</span>&gt;Home&lt;/<span style="color:#008000;font-weight:bold">label</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">title</span>&gt;Go to Home Page&lt;/<span style="color:#008000;font-weight:bold">title</span>&gt; &lt;<span style="color:#008000;font-weight:bold">link</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">link</span>&gt;/ &lt;/<span style="color:#008000;font-weight:bold">crumbinfo</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">action</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">reference</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Adding new Total Collector Model‚Ä¶.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> extends‚Ä¶ Mage_Sales_Model_Quote_Address_Total_Abstract  
</span></span><span style="display:flex;"><span> config‚Ä¶ config/global/sales/quote/totals/custom‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">sales</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">quote</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">totals</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">custom_total</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">class</span>&gt;mynamespace_mymodule/total&lt;/<span style="color:#008000;font-weight:bold">class</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">before</span>&gt;grand_total&lt;/<span style="color:#008000;font-weight:bold">before</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">after</span>&gt;subtotal,tax_subtotal&lt;/<span style="color:#008000;font-weight:bold">after</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">custom_total</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">totals</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">quote</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">sales</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> priority of total collector models can be changed by before and after tags..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> The method *collect* is used to calculate total for the shopping cart, and the method *fetch* is used to fetch data to display in frontend
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>custom product type..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> xpath: global/catalog/product/type/custom_product_type/model<span style="color:#999;font-weight:bold">&amp;amp;</span>price_model<span style="color:#999;font-weight:bold">&amp;amp;</span>allow_product_types<span style="color:#999;font-weight:bold">&amp;amp;</span>price_indexer  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">catalog</span>&gt; &lt;<span style="color:#008000;font-weight:bold">product</span>&gt; &lt;<span style="color:#008000;font-weight:bold">type</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">configurable</span> <span style="color:#b44">module</span><span style="color:#666">=</span><span style="color:#b44">&#34;catalog&#34;</span> <span style="color:#b44">translate</span><span style="color:#666">=</span><span style="color:#b44">&#34;label&#34;</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">label</span>&gt;Configurable Product&lt;/<span style="color:#008000;font-weight:bold">label</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">model</span>&gt;catalog/product_type_configurable&lt;/<span style="color:#008000;font-weight:bold">model</span>&gt; &lt;<span style="color:#008000;font-weight:bold">price_model</span>&gt;catalog/product_type_configurable_price&lt;/<span style="color:#008000;font-weight:bold">price_model</span>&gt; &lt;<span style="color:#008000;font-weight:bold">composite</span>&gt;1&lt;/<span style="color:#008000;font-weight:bold">composite</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">allow_product_types</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">simple</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">simple</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">virtual</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">virtual</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">allow_product_types</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">index_priority</span>&gt;30&lt;/<span style="color:#008000;font-weight:bold">index_priority</span>&gt; &lt;<span style="color:#008000;font-weight:bold">price_indexer</span>&gt;catalog/product_indexer_price_configurable&lt;/<span style="color:#008000;font-weight:bold">price_indexer</span>&gt; &lt;/<span style="color:#008000;font-weight:bold">configurable</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">type</span>&gt; &lt;/<span style="color:#008000;font-weight:bold">product</span>&gt; &lt;/<span style="color:#008000;font-weight:bold">catalog</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>custom indexer..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> xpath: global/index/indexer/custom_indexer/model<span style="color:#999;font-weight:bold">&amp;amp;</span>depends  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">config</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">index</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">indexer</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">test_indexer</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">model</span>&gt;test/indexer&lt;/<span style="color:#008000;font-weight:bold">model</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">depends</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">catalog_url</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">catalog_url</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">depends</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">test_indexer</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">indexer</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">index</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">global</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;/<span style="color:#008000;font-weight:bold">config</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> class Blah.. extends Mage_Index_Model_Indexer_Abstract  
</span></span><span style="display:flex;"><span> getName: get custom indexer name  
</span></span><span style="display:flex;"><span> getDescription: get custom indexer description  
</span></span><span style="display:flex;"><span> _registerEvent: custom registered event  
</span></span><span style="display:flex;"><span> _processEvent: used when processing the index event  
</span></span><span style="display:flex;"><span> reindexAll: reindex all items of your entity
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::getModel(‚Äòindex/indexer‚Äô)-&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>Getting A Database Adapter (Read or Write)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To read:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::getSingleton(‚Äòcore/resource‚Äô)-&gt;getConnection(‚Äòcore_read‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> To write:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::getSingleton(‚Äòcore/resource‚Äô)-&gt;getConnection(‚Äòcore_write‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-  
</span></span><span style="display:flex;"><span>Add Product attribute
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $installer = Mage::getResourceModel(‚Äòcatalog/setup‚Äô, ‚Äòcatalog_setup‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> if (!$installer-&gt;getAttributeId(Mage_Catalog_Model_Product::ENTITY, ‚Äòattribute_name‚Äô)) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $installer-&gt;addAttribute(Mage_Catalog_Model_Product::ENTITY, ‚Äòattribute_name‚Äô, array( // TABLE.COLUMN: DESCRIPTION:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòlabel‚Äô =&gt; ‚ÄòLabel‚Äô, // eav_attribute.frontend_label ‚Äî admin input label
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äògroup‚Äô =&gt; ‚ÄòGeneral‚Äô, // (not a column) tab in product edit screen
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòsort_order‚Äô =&gt; 0, // eav_entity_attribute.sort_order sort order in group
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòbackend‚Äô =&gt; ‚Äòmodule/class_name‚Äô, // eav_attribute.backend_model ‚Äî backend class (module/class_name format)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòtype‚Äô =&gt; ‚Äòvarchar‚Äô, // eav_attribute.backend_type ‚Äî backend storage type (varchar, text etc)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòfrontend‚Äô =&gt; ‚Äòmodule/class_name‚Äô, // eav_attribute.frontend_model ‚Äî admin class (module/class_name format)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äònote‚Äô =&gt; null, // eav_attribute.note ‚Äî admin input note (shows below input)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòdefault‚Äô =&gt; null, // eav_attribute.default_value ‚Äî admin input default value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòwysiwyg_enabled‚Äô =&gt; false, // catalog_eav_attribute.is_wysiwyg_enabled ‚Äî (products only) admin input wysiwyg enabled
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòinput‚Äô =&gt; ‚Äòinput_name‚Äô, // eav_attribute.frontend_input ‚Äî admin input type (select, text, textarea etc)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòinput_renderer‚Äô =&gt; ‚Äòmodule/class_name‚Äô, // catalog_eav_attribute.frontend_input_renderer ‚Äî (products only) admin input renderer  
</span></span><span style="display:flex;"><span> (otherwise input is used to resolve renderer)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòsource‚Äô =&gt; null, // eav_attribute.source_model ‚Äî admin input source model (for selects) (module/class_name format)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòrequired‚Äô =&gt; true, // eav_attribute.is_required ‚Äî required in admin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòuser_defined‚Äô =&gt; false, // eav_attribute.is_user_defined ‚Äî editable in admin attributes section, false for not
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòunique‚Äô =&gt; false, // eav_attribute.is_unique ‚Äî unique value required
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòglobal‚Äô =&gt; Mage_Catalog_Model_Resource_Eav_Attribute::SCOPE_GLOBAL, // catalog_eav_attribute.is_global ‚Äî  
</span></span><span style="display:flex;"><span> (products only) scope
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòvisible‚Äô =&gt; true, // catalog_eav_attribute.is_visible ‚Äî (products only) visible on admin, setting to false stops import  
</span></span><span style="display:flex;"><span> of this attribute
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòvisible_on_front‚Äô =&gt; false, // catalog_eav_attribute.is_visible_on_front ‚Äî (products only) visible on frontend (store)  
</span></span><span style="display:flex;"><span> attribute table
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòused_in_product_listing‚Äô =&gt; false, // catalog_eav_attribute.used_in_product_listing ‚Äî (products only) made available in  
</span></span><span style="display:flex;"><span> product listing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòsearchable‚Äô =&gt; false, // catalog_eav_attribute.is_searchable ‚Äî (products only) searchable via basic search
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòvisible_in_advanced_search‚Äô =&gt; false, // catalog_eav_attribute.is_visible_in_advanced_search (products only) searchable via  
</span></span><span style="display:flex;"><span> advanced search
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòfilterable‚Äô =&gt; false, // catalog_eav_attribute.is_filterable ‚Äî (products only) use in layered nav
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòfilterable_in_search‚Äô =&gt; false, // catalog_eav_attribute.is_filterable_in_search ‚Äî (products only) use in search results  
</span></span><span style="display:flex;"><span> layered nav
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòcomparable‚Äô =&gt; false, // catalog_eav_attribute.is_comparable ‚Äî (products only) comparable on frontend
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòis_html_allowed_on_front‚Äô =&gt; true, // catalog_eav_attribute.is_visible_on_front ‚Äî (products only) seems obvious, but also see  
</span></span><span style="display:flex;"><span> visible
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòapply_to‚Äô =&gt; ‚Äòsimple,configurable‚Äô, // catalog_eav_attribute.apply_to ‚Äî (products only) which product types to apply to
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòis_configurable‚Äô =&gt; false, // catalog_eav_attribute.is_configurable ‚Äî (products only) used for configurable products  
</span></span><span style="display:flex;"><span> or not
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòused_for_sort_by‚Äô =&gt; false, // catalog_eav_attribute.used_for_sort_by ‚Äî (products only) available in the ‚Äòsort by‚Äô menu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòposition‚Äô =&gt; 0, // catalog_eav_attribute.position ‚Äî (products only) position in layered naviagtion
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòused_for_promo_rules‚Äô =&gt; false, // catalog_eav_attribute.is_used_for_promo_rules ‚Äî (products only) available for use in  
</span></span><span style="display:flex;"><span> promo rules
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ));  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî  
</span></span><span style="display:flex;"><span>mage_sales_model_quote  
</span></span><span style="display:flex;"><span>* Supported events:  
</span></span><span style="display:flex;"><span> * sales_quote_load_after  
</span></span><span style="display:flex;"><span> * sales_quote_save_before  
</span></span><span style="display:flex;"><span> * sales_quote_save_after  
</span></span><span style="display:flex;"><span> * sales_quote_delete_before  
</span></span><span style="display:flex;"><span> * sales_quote_delete_after
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî  
</span></span><span style="display:flex;"><span>The ‚Äú-&gt;getTypeInstance(true)‚Äù allows you to retrieve an object that describes the type of the product, where type is the internal magento type. So, you can use this method to determine if a products is a simple product, a bundled product, a configurable product, etc.  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Magento translate trace‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Mage::helper(‚Äòcore‚Äô)-&gt;__()  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getTranslator()  
</span></span><span style="display:flex;"><span> Mage_Core_Model_Translate::translate()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
</span></span><span style="display:flex;"><span>Show custom total‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> sales_order_view ‚Äì frontend order view page  
</span></span><span style="display:flex;"><span> sales_order_invoice  
</span></span><span style="display:flex;"><span> sales_order_creditmemo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> sales_order_print ‚Äì print page
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> sales_email_order_items ‚Äì email template  
</span></span><span style="display:flex;"><span> sales_email_order_invoice_items  
</span></span><span style="display:flex;"><span> sales_email_order_creditmemo_items
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> adminhtml_sales_order_view ‚Äì backend order view page  
</span></span><span style="display:flex;"><span> adminhtml_sales_order_invoice_new ‚Äì backend new invoice view page  
</span></span><span style="display:flex;"><span> adminhtml_sales_order_invoice_view ‚Äì backend invoice view page  
</span></span><span style="display:flex;"><span> adminhtml_sales_order_creditmemo_new ‚Äì backend new creditmemo view page  
</span></span><span style="display:flex;"><span> adminhtml_sales_order_creditmemo_view ‚Äì backend creditmemo view page
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Different from catalog cart rules, shopping cart rules define the promotion for customer only when customer checks out product. They can be specified by either coupon code or others.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>http://magento-quickies.tumblr.com/post/14272607486/configurable-product-research  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>*catalog_product_super_link* table only contains data related to configurable products.  
</span></span><span style="display:flex;"><span>*catalog_product_relation* contains the relation information for bundled and grouped products, in addition to the configurable relations.  
</span></span><span style="display:flex;"><span>*eav_entity_store* contains increment id information of orders, invoices, creditmemos, shipments, etc..  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì  
</span></span><span style="display:flex;"><span>*tier prices* works with website, customer group, price and quantity (price_qty).  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>admin menu, render navigation items by class Mage_Adminhtml_Block_Page_Menu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>_isAllowed() checks navigation permission acl,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>User: the entity that has an authority to use the system. The user that we mention in Magento is the backend user.  
</span></span><span style="display:flex;"><span>Role: the role of the user when logging in to the system. In Magento, a user has only a role.  
</span></span><span style="display:flex;"><span>Rule: the rule set of user and role. It defines user‚Äôs permission or role‚Äôs permission to access the resource.  
</span></span><span style="display:flex;"><span>Assert: the condition to active an item in ACL. It is used for a special control when checking permission by ACL.  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äì Accessing Magento API via SOAP ‚Äì basic steps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Create appropriate role (Magento Admin)  
</span></span><span style="display:flex;"><span>Create web services user (Magento Admin)  
</span></span><span style="display:flex;"><span>Assign created role to the user (Magento Admin)  
</span></span><span style="display:flex;"><span>Log-in to web service and retrieve Session Id (Soap Client)  
</span></span><span style="display:flex;"><span>Call appropriate method (Soap Client)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Different ways to instantiate block:  
</span></span><span style="display:flex;"><span> ‚Äì $block = new Packagename_Modulename_Block_Foo;  
</span></span><span style="display:flex;"><span> ‚Äì $class = Mage::getConfig()-&gt;getBlockClassName(‚Äògroupname/foo‚Äô);  
</span></span><span style="display:flex;"><span> $block = new $class;  
</span></span><span style="display:flex;"><span> ‚Äì $layout = Mage::getSingleton(‚Äòcore/layout‚Äô);  
</span></span><span style="display:flex;"><span> $block = $layout-&gt;createBlock(‚Äògroupname/foo‚Äô);  
</span></span><span style="display:flex;"><span> OR $block = $this-&gt;getLayout()-&gt;createBlock(‚Äògroupname/foo‚Äô);  
</span></span><span style="display:flex;"><span> ‚Äì &lt;<span style="color:#008000;font-weight:bold">block</span> <span style="color:#b44">name</span><span style="color:#666">=</span><span style="color:#b44">&#34;baz&#34;</span> <span style="color:#b44">type</span><span style="color:#666">=</span><span style="color:#b44">&#34;groupname/foo&#34;</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">block</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äì Call block outside Magento
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> require_once ‚Äòapp/Mage.php‚Äô;  
</span></span><span style="display:flex;"><span> Mage::init();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $layout = Mage::app()-&gt;getLayout();  
</span></span><span style="display:flex;"><span> $layout-&gt;getUpdate()  
</span></span><span style="display:flex;"><span> -&gt;addHandle(‚Äòdefault‚Äô)  
</span></span><span style="display:flex;"><span> -&gt;addHandle(‚Äòsome_other_handle‚Äô)  
</span></span><span style="display:flex;"><span> -&gt;load();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> /*  
</span></span><span style="display:flex;"><span> * Generate blocks, but XML from previously loaded layout handles must be  
</span></span><span style="display:flex;"><span> * loaded first.  
</span></span><span style="display:flex;"><span> */  
</span></span><span style="display:flex;"><span> $layout-&gt;generateXml()  
</span></span><span style="display:flex;"><span> -&gt;generateBlocks();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $cart = $layout-&gt;getBlock(‚Äòcart_sidebar‚Äô)-&gt;toHtml();  
</span></span><span style="display:flex;"><span> echo $cart;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>To create new attribute in customer frontend, these three tables will be affected:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äì eav_attribute  
</span></span><span style="display:flex;"><span> ‚Äì customer_eav_attribute : id of eav_attribute here..  
</span></span><span style="display:flex;"><span> ‚Äì customer_form_attribute : 3 entries here too, for adminhtml_customer, customer_account_create and customer_account_edit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>simple models have a resource that inherits from Mage_Core_Model_Mysql4_Abstract  
</span></span><span style="display:flex;"><span>EAV models inherits from Mage_Eav_Model_Entity_Abstract
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Mage_Eav_Model_Entity_Abstract, there is no _init method  
</span></span><span style="display:flex;"><span>Mage_Eav_Model_Entity_Abstract :: _construct is not an abstract method
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>EAV setup: Mage_Eav_Model_Entity_Setup
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>//to add in eav_entity_type table‚Ä¶  
</span></span><span style="display:flex;"><span>$installer-&gt;addEntityType(‚Äòcomplexworld_eavblogpost‚Äô, array(  
</span></span><span style="display:flex;"><span> //entity_mode is the URI you‚Äôd pass into a Mage::getModel() call  
</span></span><span style="display:flex;"><span> ‚Äòentity_model‚Äô =&gt; ‚Äòcomplexworld/eavblogpost‚Äô,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> //table refers to the resource URI complexworld/eavblogpost  
</span></span><span style="display:flex;"><span> //&lt;<span style="color:#008000;font-weight:bold">complexworld_resource</span>&gt;‚Ä¶&lt;<span style="color:#008000;font-weight:bold">eavblogpost</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">eavblogpost</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">complexworld_resource</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> ‚Äòtable‚Äô =&gt;‚Äôcomplexworld/eavblogpost‚Äô,  
</span></span><span style="display:flex;"><span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>//to create eav tables for int, varchar, text, datetime, decimal‚Ä¶  
</span></span><span style="display:flex;"><span>$installer-&gt;createEntityTables(  
</span></span><span style="display:flex;"><span> $this-&gt;getTable(‚Äòcomplexworld/eavblogpost‚Äô)  
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>if you have an order with three items and you refund one item the order don¬¥t change the state, only when you refund all item of the order this change to closed state  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>to render a block, Mage_Core_Block_Template::renderView() is called  
</span></span><span style="display:flex;"><span>to render a block HTML, Mage_Core_Block_Template::_toHtml() is called
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî  
</span></span><span style="display:flex;"><span>In addAttribute(), if attribute is system, it will add to all existing attribute sets  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>in Mage_Adminhtml_Block_Widget_Grid_Container  
</span></span><span style="display:flex;"><span>$_blockGroup is your module‚Äôs name.  
</span></span><span style="display:flex;"><span>$_controller is the path to your grid block.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Direct SQL queries:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $resource = Mage::getSingleton(‚Äòcore/resource‚Äô);  
</span></span><span style="display:flex;"><span> $readConnection = $resource-&gt;getConnection(‚Äòcore_read‚Äô);  
</span></span><span style="display:flex;"><span> $writeConnection = $resource-&gt;getConnection(‚Äòcore_write‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $tableName = $resource-&gt;getTableName(‚Äòcatalog_product_entity‚Äô);  
</span></span><span style="display:flex;"><span> $tableName = $resource-&gt;getTableName(‚Äòcatalog/product‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $readConnection-&gt;fetchAll(‚Ä¶‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> fetchAll() ‚Äì Fetches all SQL result rows as a sequential array.  
</span></span><span style="display:flex;"><span> fetchCol() ‚Äì Fetches the first column of all SQL result rows as an array.  
</span></span><span style="display:flex;"><span> fetchOne() ‚Äì Fetches the first column of the first row of the SQL result.  
</span></span><span style="display:flex;"><span> fetchRow() ‚Äì Fetches the first row of the SQL result.  
</span></span><span style="display:flex;"><span> fetchAssoc() ‚Äì Fetches all SQL result rows as an associative array.  
</span></span><span style="display:flex;"><span> fetchPairs() ‚Äì Fetches all SQL result rows as an array of key-value pairs.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Varien_Db_Adapter_Pdo_Mysql::prepareSqlCondition($fieldname, $condition)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> If $condition integer or string ‚Äì exact value will be filtered (‚Äòeq‚Äô condition)  
</span></span><span style="display:flex;"><span> *  
</span></span><span style="display:flex;"><span> * If $condition is array ‚Äì one of the following structures is expected:  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúfrom‚Äù =&gt; $fromValue, ‚Äúto‚Äù =&gt; $toValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúeq‚Äù =&gt; $equalValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúneq‚Äù =&gt; $notEqualValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúlike‚Äù =&gt; $likeValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúin‚Äù =&gt; array($inValues))  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúnin‚Äù =&gt; array($notInValues))  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúnotnull‚Äù =&gt; $valueIsNotNull)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúnull‚Äù =&gt; $valueIsNull)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúmoreq‚Äù =&gt; $moreOrEqualValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúgt‚Äù =&gt; $greaterValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúlt‚Äù =&gt; $lessValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúgteq‚Äù =&gt; $greaterOrEqualValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúlteq‚Äù =&gt; $lessOrEqualValue)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúfinset‚Äù =&gt; $valueInSet)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúregexp‚Äù =&gt; $regularExpression)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúseq‚Äù =&gt; $stringEqual)  
</span></span><span style="display:flex;"><span> * ‚Äì array(‚Äúsneq‚Äù =&gt; $stringNotEqual)  
</span></span><span style="display:flex;"><span> *  
</span></span><span style="display:flex;"><span> * If non matched ‚Äì sequential array is expected and OR conditions  
</span></span><span style="display:flex;"><span> * will be built using above mentioned structure
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>reindex via code‚Ä¶.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $indexer = Mage::getSingleton(‚Äòindex/indexer‚Äô);  
</span></span><span style="display:flex;"><span> $process = $indexer-&gt;getProcessByCode(‚Äòcatalog_product_price‚Äô);  
</span></span><span style="display:flex;"><span> $process-&gt;reindexEverything();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> The following are indexer codes which you can use instead of the catalog_product_price index above:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> catalog_product_attribute Product Attributes  
</span></span><span style="display:flex;"><span> catalog_product_price Product Prices  
</span></span><span style="display:flex;"><span> catalog_url Catalog URL Rewrites  
</span></span><span style="display:flex;"><span> catalog_product_flat Product Flat Data  
</span></span><span style="display:flex;"><span> catalog_category_flat Category Flat Data  
</span></span><span style="display:flex;"><span> catalog_category_product Category Products  
</span></span><span style="display:flex;"><span> catalogsearch_fulltext Catalog Search Index  
</span></span><span style="display:flex;"><span> cataloginventory_stock Stock Status  
</span></span><span style="display:flex;"><span> tag_summary Tag Aggregation Data
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Mage::getSingleton(‚Äòcore/session‚Äô)-&gt;addError(‚ÄòAn Error‚Äô);  
</span></span><span style="display:flex;"><span>Mage::getSingleton(‚Äòcore/session‚Äô)-&gt;addWarning(‚ÄòA Warning‚Äô);  
</span></span><span style="display:flex;"><span>Mage::getSingleton(‚Äòcore/session‚Äô)-&gt;addNotice (‚ÄòA Notice‚Äô);  
</span></span><span style="display:flex;"><span>Mage::getSingleton(‚Äòcore/session‚Äô)-&gt;addSuccess(‚ÄòA Success‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>display ‚Äúout of stock‚Äù uses these indexes:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Product Attributes (catalog_product_attribute)  
</span></span><span style="display:flex;"><span> Product Prices (catalog_product_price)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Altering Config Data During Setup:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Setting a value in the default scope:  
</span></span><span style="display:flex;"><span> $installer-&gt;setConfigData(‚Äòsome/path‚Äô, ‚Äòvalue‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Setting a value in a specific store:  
</span></span><span style="display:flex;"><span> $installer-&gt;setConfigData(‚Äòsome/path‚Äô, ‚Äòvalue‚Äô, ‚Äòstores‚Äô, 1);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Deleting a value from all scopes:  
</span></span><span style="display:flex;"><span> $installer-&gt;deleteConfigData(‚Äòsome/path‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Deleting a value from a certain scope (unfortunately you cannot choose which scope ID though:  
</span></span><span style="display:flex;"><span> $installer-&gt;deleteConfigData(‚Äòsome/path‚Äô, ‚Äòstores‚Äô);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Clearing cache:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Clean everything (use either):  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getCacheInstance()-&gt;flush();  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getCache()-&gt;clean();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> Clean specific types:  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getCacheInstance()-&gt;cleanType(‚Äòconfig‚Äô);  
</span></span><span style="display:flex;"><span> instead of config, we can use layout, block_html, translate, collections, eav, config_api
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Get all declared cache types:  
</span></span><span style="display:flex;"><span> Mage::app()-&gt;getCacheInstance()-&gt;getTypes();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>source model in backend Adminhtml module, *requires to return* toOptionArray()  
</span></span><span style="display:flex;"><span>source model in EAV while adding attributes *requires to return* getAllOptions()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The core/template block is the foundation of the template system, allowing us the ability to load .phtml files from our themes.  
</span></span><span style="display:flex;"><span>The page/html_pager block provides generic methods for paginating collections, such as isLastPage().  
</span></span><span style="display:flex;"><span>cron/observer::dispatch handles the cron schedule‚Äôs creation, cleanup and execution of the jobs defined in the various config.xml files
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>required fields when creating a new category in backend:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name, is_active, include_in_menu, available_sort_by, default_sort_by
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>required fields when creating a new product in backend:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name, sku, weight, status, visibility, tax class, price, short_desc, description, qty  
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The shipping rate is upon Weight vs. Destination, Price vs. Destination, or # of Items vs. Destination (site admin can configurate for that)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Mage_Shipping_Model_Carrier_Abstract:: collectRates()  
</span></span><span style="display:flex;"><span>Mage_Shipping_Model_Carrier_Interface:: isTrackingAvailable(), getAllowedMethods()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>while adding new attributes in $setup-&gt;addAttribute(‚Äòorder‚Äô, ‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>| catalog_category |  
</span></span><span style="display:flex;"><span>| catalog_product |  
</span></span><span style="display:flex;"><span>| creditmemo |  
</span></span><span style="display:flex;"><span>| creditmemo_comment |  
</span></span><span style="display:flex;"><span>| creditmemo_item |  
</span></span><span style="display:flex;"><span>| customer |  
</span></span><span style="display:flex;"><span>| customer_address |  
</span></span><span style="display:flex;"><span>| customer_payment |  
</span></span><span style="display:flex;"><span>| invoice |  
</span></span><span style="display:flex;"><span>| invoice_comment |  
</span></span><span style="display:flex;"><span>| invoice_item |  
</span></span><span style="display:flex;"><span>| invoice_shipment |  
</span></span><span style="display:flex;"><span>| order |  
</span></span><span style="display:flex;"><span>| order_address |  
</span></span><span style="display:flex;"><span>| order_item |  
</span></span><span style="display:flex;"><span>| order_payment |  
</span></span><span style="display:flex;"><span>| order_status |  
</span></span><span style="display:flex;"><span>| order_status_history |  
</span></span><span style="display:flex;"><span>| quote |  
</span></span><span style="display:flex;"><span>| quote_address |  
</span></span><span style="display:flex;"><span>| quote_address_item |  
</span></span><span style="display:flex;"><span>| quote_address_rate |  
</span></span><span style="display:flex;"><span>| quote_item |  
</span></span><span style="display:flex;"><span>| quote_payment |  
</span></span><span style="display:flex;"><span>| shipment |  
</span></span><span style="display:flex;"><span>| shipment_comment |  
</span></span><span style="display:flex;"><span>| shipment_item |  
</span></span><span style="display:flex;"><span>| shipment_track |
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Adding JS, Skin JS and CSS files‚Ä¶
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addItem&#34;</span>&gt;&lt;<span style="color:#008000;font-weight:bold">type</span>&gt;skin_js&lt;/<span style="color:#008000;font-weight:bold">type</span>&gt;&lt;<span style="color:#008000;font-weight:bold">name</span>&gt;js/ie6.js&lt;/<span style="color:#008000;font-weight:bold">name</span>&gt;&lt;<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;<span style="color:#008000;font-weight:bold">if</span>&gt;lt IE 7&lt;/<span style="color:#008000;font-weight:bold">if</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">action</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addItem&#34;</span>&gt;&lt;<span style="color:#008000;font-weight:bold">type</span>&gt;js&lt;/<span style="color:#008000;font-weight:bold">type</span>&gt;&lt;<span style="color:#008000;font-weight:bold">name</span>&gt;lib/ds-sleight.js&lt;/<span style="color:#008000;font-weight:bold">name</span>&gt;&lt;<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;<span style="color:#008000;font-weight:bold">if</span>&gt;lt IE 7&lt;/<span style="color:#008000;font-weight:bold">if</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">action</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addItem&#34;</span>&gt;&lt;<span style="color:#008000;font-weight:bold">type</span>&gt;skin_css&lt;/<span style="color:#008000;font-weight:bold">type</span>&gt;&lt;<span style="color:#008000;font-weight:bold">name</span>&gt;css/styles-ie.css&lt;/<span style="color:#008000;font-weight:bold">name</span>&gt;&lt;<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">params</span>&gt;&lt;<span style="color:#008000;font-weight:bold">if</span>&gt;lt IE 8&lt;/<span style="color:#008000;font-weight:bold">if</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">action</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addJs&#34;</span>&gt;&lt;<span style="color:#008000;font-weight:bold">script</span>&gt;mage<span style="color:#666">/</span>cookies.js&lt;/<span style="color:#008000;font-weight:bold">script</span>&gt;&lt;/<span style="color:#008000;font-weight:bold">action</span>&gt;  
</span></span><span style="display:flex;"><span> &lt;<span style="color:#008000;font-weight:bold">action</span> <span style="color:#b44">method</span><span style="color:#666">=</span><span style="color:#b44">&#34;addCss&#34;</span>&gt;&lt;<span style="color:#008000;font-weight:bold">style</span><span style="color:#b44">sheet</span>&gt;<span style="">css/print.css&lt;/stylesheet&gt;&lt;params&gt;media=‚Äùprint‚Äù&lt;/params&gt;&lt;/action&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>‚Äî‚Äî‚Äî‚Äì
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CMS Directives‚Ä¶..
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> can be used in CMS, static blocks or emails
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> {{block id=‚Äôblock_id‚Äô}}  
</span></span><span style="display:flex;"><span> {{block type=‚Äômodule/package_classname‚Äô template=‚Äôpath/to/template.phtml‚Äô}}  
</span></span><span style="display:flex;"><span> {{config path=‚Äôsection/group/field‚Äô}}  
</span></span><span style="display:flex;"><span> {{htmlescape var=‚Äù allowed_tags=‚Äù}}  
</span></span><span style="display:flex;"><span> {{htmlescape var=‚Äô[Hello](javascript:alert(1);)‚Äò}}  
</span></span><span style="display:flex;"><span> //this outputs [Hello](javascript:alert(1);) and doesn‚Äôt interpreted by browsers  
</span></span><span style="display:flex;"><span> {{layout handle=‚Äù}}  
</span></span><span style="display:flex;"><span> {{media url=‚Äù}}  
</span></span><span style="display:flex;"><span> {{skin url=‚Äù}}  
</span></span><span style="display:flex;"><span> {{store url=‚Äù}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> {{block type=‚Äônamespace_custom/test‚Äô my_param1=‚Äôvalue 1‚Ä≤ my_param2=‚Äôvalue 2‚Ä≤}}</span></span></code></pre></div>
<p>BEST LUCK! :)</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento Interview questions and answers</title>
      <link>http://localhost:1313/magento-interview-questions-and-answers/</link>
      <pubDate>Thu, 19 Jul 2012 11:25:13 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-interview-questions-and-answers/</guid>
      <description>&lt;p&gt;Magento Interview questions and answers for freshers as well as experienced developers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. Explain Magento‚Äôs MVC architecture&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;First of all, what is MVC?&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;MVC stands for &lt;strong&gt;Model-View-Controller&lt;/strong&gt;. Any application that separates it‚Äôs data access, business logic and user interface is called MVC. There can be two types of MVC: &lt;strong&gt;convention-based and configuration-based&lt;/strong&gt;. Example, cakePHP is convention-based, i.e. you just need to follow the instructions of the core system to get your module ready in just few lines. Magento is configuration-based, i.e. you need to specify each and every thing to your module‚Äôs config file in order to get it work. Magento has controllers (for request/response routing), Block (for rendering content), Model (for business logic), Resource/Mysql4 (for database operations), etc (for module-specific configuration files), Helper (for common functions), sql (for setup scripts), layout (for connecting block with templates for each controller action) and template/.PHTML file (for Presentation i.e. View).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Magento Interview questions and answers for freshers as well as experienced developers.</p>
<p><strong>1. Explain Magento‚Äôs MVC architecture</strong></p>
<p><em>First of all, what is MVC?</em></p>
<p>MVC stands for <strong>Model-View-Controller</strong>. Any application that separates it‚Äôs data access, business logic and user interface is called MVC. There can be two types of MVC: <strong>convention-based and configuration-based</strong>. Example, cakePHP is convention-based, i.e. you just need to follow the instructions of the core system to get your module ready in just few lines. Magento is configuration-based, i.e. you need to specify each and every thing to your module‚Äôs config file in order to get it work. Magento has controllers (for request/response routing), Block (for rendering content), Model (for business logic), Resource/Mysql4 (for database operations), etc (for module-specific configuration files), Helper (for common functions), sql (for setup scripts), layout (for connecting block with templates for each controller action) and template/.PHTML file (for Presentation i.e. View).</p>
<p><em>How Magento‚Äôs MVC works:</em></p>
<p>1. When you enter the URL (something like <a href="http://loca.lho.st/frontname/controller/method/param1/value1/param2/value2)">http://loca.lho.st/frontname/controller/method/param1/value1/param2/value2)</a>, this URL is intercepted by one PHP file called index.php which instantiates Magento application<br>
2. Magento application instantiates Front Controller object<br>
3. Further, front controller instantiates Router objects (specified in module‚Äôs config.xml, global tag)<br>
4. Now, Router is responsible to ‚Äúmatch‚Äù the frontname which is in our URL<br>
5. If ‚Äúmatch‚Äù is found, it sees controller name and method name in the URL, which is finally called.<br>
6. Now depending on what is written in action name (method name), it is executed. If any models are called in it, the controller method will instantiate that model and call the method in it which is requested.<br>
7. Then the controller action (method) instantiate the Layout object, which calls Block specified for this action (method) name (Each controller action name have block and template file associated with it, which can be found at app/design/frontend or adminhtml/namespace/module/layout/module.xml file, name of layout file (module.xml) can be found in config.xml of that module, in layout updates tag).<br>
8. Template file (.phtml) now calls the corresponding block for any method request. So, if you write $this-&gt;methodName in .phtml file, it will check ‚ÄúmethodName‚Äù in the block file which is associated in module.xml file.<br>
9. Block contains PHP logic. It references Models for any data from DB.<br>
10. If either Block, Template file or Controller need to get/set some data from/to database, they can call Model directly like Mage::getModel(‚Äòmodulename/modelname‚Äô).<br>
For diagramatic view: <a href="http://alanstorm.com/2009/img/magento-book/magento-mvc.png">click here</a> (courtsey: Alan Storm)</p>
<p><strong>2. How Magento ORM works?</strong></p>
<p>ORM stands for <strong>Object Relational Mapping</strong>. It‚Äôs a programming technique used to convert different types of data to Objects and vice versa.</p>
<p>In Magento, ORM is shown as Model (based on Zend Framework‚Äôs Zend_Db_Adapter), which further breaks down to two types of Models.</p>
<p>‚Äì First is the ‚Äúsimple‚Äù i.e. <strong>Regular</strong> Models which is nothing but flat table or our regular table structure.<br>
‚Äì Second Model is <strong>EAV</strong> (Entity Attribute Value), which is quite complicated and expensive to query.</p>
<p>All Magento Models interacting with database are inherited from Mage_Core_Model_Abstract class, which is further inherited from Varien_Object.</p>
<p>Difference between two Models is, Simple Model is inherited from <em>Mage_Core_Model_Resource_Db_Abstract</em> class,<br>
while EAV is inherited from <em>Mage_Eav_Model_Entity_Abstract</em>.</p>
<p>For those who don‚Äôt know what EAV is, please read my 3rd answer below.</p>
<p>So, to end up this question,<br>
when you want to get some data in Magento, you call it like this:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>Mage<span style="color:#666">::</span><span style="color:#b44">getModel</span>(‚Äòmodule<span style="color:#666">/</span>model‚Äô)<span style="color:#666">-&gt;</span><span style="color:#b44">load</span>(<span style="color:#666">1</span>);</span></span></code></pre></div><br>
where 1 is the primary key id for some Regular/Simple table, while in EAV so many tables are joined to fetch just single row of data.</p>
<p><strong>3. What is EAV in Magento?</strong></p>
<p>EAV, stands for <strong>Entity Attribute Value</strong>, is a technique which allows you to add unlimited columns to your table virtually. Means, the fields which is represented in ‚Äúcolumn‚Äù way in a regular table, is represented in a ‚Äúrow‚Äù (records) way in EAV. In EAV, you have one table which holds all the ‚Äúattribute‚Äù (table field names) data, and other tables which hold the ‚Äúentity‚Äù (id or primary id) and value (value for that id) against each attribute.</p>
<p>In Magento, there is one table to hold attribute values called <em>eav_attribute</em> and 5-6 tables which holds entity and data in fully normalized form,</p>
<p>‚Äì eav_entity, eav_entity_int (for holding Integer values),<br>
‚Äì eav_entity_varchar (for holding Varchar values),<br>
‚Äì eav_entity_datetime (for holding Datetime values),<br>
‚Äì eav_entity_decimal (for holding Decimal/float values),<br>
‚Äì eav_entity_text (for holding text (mysql Text type) values).</p>
<p>EAV is expensive and should only be used when you are not sure about number of fields in a table which can vary in future. To just get one single record, Magento joins 4-5 tables to get data in EAV. But this doesn‚Äôt mean that EAV only has drawbacks. The main <strong>advantage of EAV</strong> is when you may want to add table field in future, when there are thousands or millions of records already present in your table. In regular table, if you add table field with these amount of data, it will screw up your table, as for each empty row also some bytes will be allocated as per data type you select. While in EAV, adding the table column will not affect the previously saved records (also the extra space will not get allocated!) and all the new records will seamlessly have data in these columns without any problem.</p>
<p><strong>4. Difference between Mage::getSingleton() and Mage::getModel()</strong></p>
<p>The difference between Mage:getSingleton() and Mage::getModel() is that the former one does not create an object if the object for same class is already created, while the later creates new objects every time for the class when it‚Äôs called.</p>
<p>Mage::getSingleton() uses the ‚Äú<strong>singleton design pattern</strong>‚Äù of PHP. If the object is not created, it will create it.</p>
<p>Mage::getSingleton() is mostly used when you want to create an object once, modify it and later fetch from it. Popular example is session, you first create a session object, and then add/remove values from session across different pages, so that it retains your values (e.g. cart values, logged in customer details, etc.) and doesn‚Äôt create new session object losing your last changes.</p>
<p>Mage::getModel() is used when you want to have the fresh data from the database. Example is when you want to show records from database.</p>
<p><strong>8. How will you call a CMS page in your module‚Äôs PHTML file?</strong></p>
<p>$this-&gt;getLayout()-&gt;createBlock(‚Äòcms/block‚Äô)-&gt;setBlockId(‚Äòblockidentifier‚Äô)-&gt;toHtml();</p>
<p><strong>9. What is codePool in Magento?</strong></p>
<p>codePool is a tag which you have to specify when registering new module in app/etc/modules/Company_Module.xml<br>
There are 3 codePools in Magento: core, community and local, which are resided at app/code/ directory.<br>
Core codePool is used by Magento core team, Community is generally used by 3rd party extensions and Local codePool should be used for in-hour module development and overriding of core and community modules for custom requirement.<br>
So in short, codePool helps Magento to locate module inside app/code/ for processing.</p>
<p><strong>15. When will you need to clear cache to see the changes in Magento?</strong></p>
<p>When you have added/modified XML, JS, CSS file(s).</p>
<p><strong>17. How will you enable product‚Äôs custom attribute visibility in frontend?</strong></p>
<p>In the <em>Manage Attributes</em> section of the custom attribute, select <em>Visible on Product View Page on Front-end</em> and <em>Used in Product Listing</em> to <em>Yes</em>.</p>
<p><strong>19. Difference between EAV and flat model</strong></p>
<p>EAV is entity attribute value database model, where data is fully in normalized form. Each column data value is stored in their respective data type table. Example, for a product, product ID is stored in catalog_product_entity_int table, product name in catalog_product_entity_varchar, product price in catalog_product_entity_decimal, product created date in catalog_product_entity_datetime and product description in catalog_product_entity_text table. EAV is complex as it joins 5-6 tables even if you want to get just one product‚Äôs details. Columns are called attributes in EAV.</p>
<p>Flat model uses just one table, so it‚Äôs not normalized and uses more database space. It clears the EAV overhead, but not good for dynamic requirements where you may have to add more columns in database table in future. It‚Äôs good when comes to performance, as it will only require one query to load whole product instead of joining 5-6 tables to get just one product‚Äôs details. Columns are called fields in flat model.</p>
<p><strong>20. Is it mandatory to give Namespace while creating custom module in Magento?</strong></p>
<p>No</p>
<p><strong>21. How will you override Block/Model/controllers in Magento?</strong></p>
<p><a href="http://ka.lpe.sh/2011/06/08/overriderewrite-magento-core-blocks-and-controllers/" title="Magento override block controller model helper">http://ka.lpe.sh/2011/06/08/overriderewrite-magento-core-blocks-and-controllers/</a></p>
<p><strong>23. How will you add/remove content from core‚Äôs system.xml file?</strong></p>
<p>You can do that by overriding system.xml configuration. Examples:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&lt;config&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;sections&gt;</span> <span style="color:#008000;font-weight:bold">&lt;catalog&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;groups&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;frontend&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;label&gt;</span>Overriding Catalog Frontend in system config<span style="color:#008000;font-weight:bold">&lt;/label&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/frontend&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/groups&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/catalog&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/sections&gt;&lt;/config&gt;</span></span></span></code></pre></div><br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#008000;font-weight:bold">&lt;config&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;sections&gt;</span> <span style="color:#008000;font-weight:bold">&lt;payment&gt;</span> <span style="color:#008000;font-weight:bold">&lt;groups&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;cashondelivery&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;fields&gt;</span>  
</span></span><span style="display:flex;"><span>   
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/fields&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/cashondelivery&gt;</span>  
</span></span><span style="display:flex;"><span> <span style="color:#008000;font-weight:bold">&lt;/groups&gt;</span> <span style="color:#008000;font-weight:bold">&lt;/payment&gt;</span> <span style="color:#008000;font-weight:bold">&lt;/sections&gt;&lt;/config&gt;</span></span></span></code></pre></div></p>
<p><strong>24. Can you have more than one Grid in a module?</strong></p>
<p>Yes</p>
<p><strong>25. How will you join flat table and EAV table in Magento?</strong></p>
<p><a href="http://ka.lpe.sh/2013/04/28/magento-join-eav-collection-with-flat-table/" title="Magento Join EAV collection with flat table">http://ka.lpe.sh/2013/04/28/magento-join-eav-collection-with-flat-table/</a></p>
<p><strong>26. How will you enable maintenance mode of your Magento website?</strong></p>
<p><a href="http://ka.lpe.sh/2011/12/31/magento-show-maintenance-mode-page-website-under-construction/" title="Magento show maintenance mode">http://ka.lpe.sh/2011/12/31/magento-show-maintenance-mode-page-website-under-construction/</a></p>
<p><strong>27. What are ‚Äúmagic methods‚Äù in Magento?</strong></p>
<p>Magento uses __call(), __get(), __set(), __uns(), __has(), __isset(), __toString(), __construct(), etc. magic methods. You can find more details inside class Varien_Object<br>
For more information about magic methods: <a href="http://php.net/manual/en/language.oop5.magic.php" title="PHP magic methods">http://php.net/manual/en/language.oop5.magic.php</a></p>
<p><strong>28. How many database tables will Magento create when you make a new EAV module?</strong></p>
<p>Magento creates 6 tables when you create new EAV module. Tables: module, module_datetime, module_decimal, module_int, module_text and module_varchar. one is the main entity table, and rest 5 tables which holds attribute‚Äôs data in different data types. So that integer values will go to module_int table, price values to module_decimal, etc.</p>
<p><strong>33. Where will you write your module‚Äôs business logic in Magento?</strong></p>
<p>inside Model</p>
<p><strong>34. Explain different types of sessions in Magento (e.g. customer/session, checkout/session, core/session) and the reason why you store data in different session types?</strong></p>
<p>Customer sessions stores data related to customer, checkout session stores data related to quote and order. They are actuall under one session in an array. So firstname in customer/session will be $_SESSION[‚Äòcustomer‚Äô][‚Äòfirstname‚Äô] and cart items count in checkout/session will be $_SESSION[‚Äòcheckout‚Äô][‚Äòitems_count‚Äô]. The reason Magento uses session types separately is because once the order gets placed, the checkout session data information should get flushed which can be easily done by just unsetting $_SESSION[‚Äòcheckout‚Äô] session variable. So that the session is not cleared, just session data containing checkout information is cleared and rest all the session types are still intact.</p>
<p><strong>35. What are the commonly used block types? What is the special in core/text_list block type.</strong></p>
<p>Commonly used block types: core/template, page/html, page/html_head, page/html_header, page/template_links, core/text_list, page/html_wrapper, page/html_breadcrumbs, page/html_footer, core/messages, page/switch.<br>
Some blocks like content, left, right etc. are of type core/text_list. When these blocks are rendered, all their child blocks are rendered automatically without the need to call getChildHtml() method.</p>
<p><strong>36. What are the different design patterns used in Magento?</strong></p>
<p><a href="http://ka.lpe.sh/2013/02/25/magento-design-patterns/" title="Magento design patterns">http://ka.lpe.sh/2013/02/25/magento-design-patterns/</a></p>
<p><strong>37. What can you do to optimize Magento performance?</strong></p>
<p><a href="http://ka.lpe.sh/category/performance/" title="Magento Performance">http://ka.lpe.sh/category/performance/</a></p>
<p><strong>38. Where is the relation between configurable product and it‚Äôs simple product stored in database?</strong></p>
<p>In the 2 tables:<br>
catalog_product_relation<br>
catalog_product_superlink_table</p>
<p><strong>39. How will you log current collection‚Äôs SQL query?</strong></p>
<p>$collection-&gt;printLogQuery(true); OR $collection-&gt;getSelect()-&gt;__toString();</p>
<p><strong>40. How to get first item or last item from the collection?</strong></p>
<p>$collection-&gt;getFirstItem() and $collection-&gt;getLastItem();</p>
<p>For more Magento interview questions for freshers and experienced developers, check this:<br>
<a href="http://ka.lpe.sh/2012/01/29/magento-advanced-interview-questions/" title="Magento Interview Questions for Experienced and Freshers">Magento Interview Questions for Experienced and Freshers</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento Interview Questions</title>
      <link>http://localhost:1313/magento-interview-questions/</link>
      <pubDate>Sun, 29 Jan 2012 06:29:58 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-interview-questions/</guid>
      <description>&lt;p&gt;Here is a list of Magento advanced interview questions that I can think off now.&lt;br&gt;&#xA;EDIT: There are also Expert interview questions that I added lately.&lt;/p&gt;&#xA;&lt;p&gt;1. Explain Magento‚Äôs MVC architecture&lt;br&gt;&#xA;2. How Magento‚Äôs ORM work?&lt;br&gt;&#xA;3. What is EAV in Magento?&lt;br&gt;&#xA;4. Difference between Mage::getSingleton() and Mage::getModel()&lt;br&gt;&#xA;5. What are the steps to change the theme of Magento&lt;br&gt;&#xA;6. If you want to add/modify core functionality, how will you do it?&lt;br&gt;&#xA;7. How will you create a new module in Magento?&lt;br&gt;&#xA;8. How will you call a CMS page in your module‚Äôs PHTML file?&lt;br&gt;&#xA;9. What is codePool in Magento?&lt;br&gt;&#xA;10. Explain handles in Magento‚Äôs layout&lt;br&gt;&#xA;11. What is &lt;!-- raw HTML omitted --&gt; in Magento‚Äôs config XML?&lt;br&gt;&#xA;12. Explain Magento‚Äôs URL structure&lt;br&gt;&#xA;13. How will you optimize Magento featured website?&lt;br&gt;&#xA;14. Explain in detail cache management in Magento&lt;br&gt;&#xA;15. When will you need to clear cache to see the changes in Magento?&lt;br&gt;&#xA;16. Explain the flow of placing an order technically&lt;br&gt;&#xA;17. How will you enable product‚Äôs custom attribute visibility in frontend?&lt;br&gt;&#xA;18. How will you upgrade your custom module?&lt;br&gt;&#xA;19. Difference between EAV and flat table&lt;br&gt;&#xA;20. Is it mandatory to give Namespace while creating custom module in Magento?&lt;br&gt;&#xA;21. How will you override Block/Model/controllers in Magento?&lt;br&gt;&#xA;22. What is difference between override and rewrite?&lt;br&gt;&#xA;23. How will you add/remove content from core‚Äôs system.xml file?&lt;br&gt;&#xA;24. Can you have more than one Grid in a module?&lt;br&gt;&#xA;25. How will you join flat table and EAV table in Magento?&lt;br&gt;&#xA;26. How will you enable maintenance mode of your Magento website?&lt;br&gt;&#xA;27. What are ‚Äúmagic methods‚Äù in Magento?&lt;br&gt;&#xA;28. How many database tables will Magento create when you make a new EAV module?&lt;br&gt;&#xA;29. Explain Magento‚Äôs Collections&lt;br&gt;&#xA;30. Explain events and observers in Magento&lt;br&gt;&#xA;31. Difference between block‚Äôs ‚Äúname‚Äù and ‚Äúas‚Äù attributes in layout XML&lt;br&gt;&#xA;32. When to use session and when to use registry to store variables?&lt;br&gt;&#xA;33. Where will you write your module‚Äôs business logic in Magento?&lt;br&gt;&#xA;34. Explain different types of sessions in Magento (e.g. customer/session, checkout/session, core/session) and the reason why you store data in different session types.&lt;br&gt;&#xA;35. What are the commonly used block types? What is the special in &lt;em&gt;core/text_list&lt;/em&gt; block type.&lt;br&gt;&#xA;36. What are the different design patterns used in Magento?&lt;br&gt;&#xA;37. What can you do to optimize Magento performance?&lt;br&gt;&#xA;38. Where is the relation between configurable product and it‚Äôs simple product stored in database?&lt;br&gt;&#xA;39. How will you log current collection‚Äôs SQL query?&lt;br&gt;&#xA;40. How to get first item or last item from the collection?&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Here is a list of Magento advanced interview questions that I can think off now.<br>
EDIT: There are also Expert interview questions that I added lately.</p>
<p>1. Explain Magento‚Äôs MVC architecture<br>
2. How Magento‚Äôs ORM work?<br>
3. What is EAV in Magento?<br>
4. Difference between Mage::getSingleton() and Mage::getModel()<br>
5. What are the steps to change the theme of Magento<br>
6. If you want to add/modify core functionality, how will you do it?<br>
7. How will you create a new module in Magento?<br>
8. How will you call a CMS page in your module‚Äôs PHTML file?<br>
9. What is codePool in Magento?<br>
10. Explain handles in Magento‚Äôs layout<br>
11. What is <!-- raw HTML omitted --> in Magento‚Äôs config XML?<br>
12. Explain Magento‚Äôs URL structure<br>
13. How will you optimize Magento featured website?<br>
14. Explain in detail cache management in Magento<br>
15. When will you need to clear cache to see the changes in Magento?<br>
16. Explain the flow of placing an order technically<br>
17. How will you enable product‚Äôs custom attribute visibility in frontend?<br>
18. How will you upgrade your custom module?<br>
19. Difference between EAV and flat table<br>
20. Is it mandatory to give Namespace while creating custom module in Magento?<br>
21. How will you override Block/Model/controllers in Magento?<br>
22. What is difference between override and rewrite?<br>
23. How will you add/remove content from core‚Äôs system.xml file?<br>
24. Can you have more than one Grid in a module?<br>
25. How will you join flat table and EAV table in Magento?<br>
26. How will you enable maintenance mode of your Magento website?<br>
27. What are ‚Äúmagic methods‚Äù in Magento?<br>
28. How many database tables will Magento create when you make a new EAV module?<br>
29. Explain Magento‚Äôs Collections<br>
30. Explain events and observers in Magento<br>
31. Difference between block‚Äôs ‚Äúname‚Äù and ‚Äúas‚Äù attributes in layout XML<br>
32. When to use session and when to use registry to store variables?<br>
33. Where will you write your module‚Äôs business logic in Magento?<br>
34. Explain different types of sessions in Magento (e.g. customer/session, checkout/session, core/session) and the reason why you store data in different session types.<br>
35. What are the commonly used block types? What is the special in <em>core/text_list</em> block type.<br>
36. What are the different design patterns used in Magento?<br>
37. What can you do to optimize Magento performance?<br>
38. Where is the relation between configurable product and it‚Äôs simple product stored in database?<br>
39. How will you log current collection‚Äôs SQL query?<br>
40. How to get first item or last item from the collection?<!-- raw HTML omitted --></p>
<p>If you are looking for answers to these questions, check it out here:<br>
<a href="http://ka.lpe.sh/2012/07/19/magento-interview-questions-and-answers/" title="Magento Interview questions and answers for experienced and freshers">Magento Interview questions and answers for experienced and freshers</a></p>
<p>Best luck!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
