<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PHP on KALPESH MEHTA</title>
    <link>http://localhost:1313/categories/php/</link>
    <description>Recent content in PHP on KALPESH MEHTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>k@lpe.sh (Kalpesh Mehta)</managingEditor>
    <webMaster>k@lpe.sh (Kalpesh Mehta)</webMaster>
    <copyright>Copyright © 2025 kalpesh mehta</copyright>
    <lastBuildDate>Wed, 12 Jun 2013 19:19:54 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP redirect without header()</title>
      <link>http://localhost:1313/php-redirect-without-header/</link>
      <pubDate>Wed, 12 Jun 2013 19:19:54 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/php-redirect-without-header/</guid>
      <description>&lt;p&gt;It’s very frustrating when you want to redirect from one page to another, and you get the error:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Warning: Cannot modify header information – headers already sent by (output started at /some/filename.php:12) in /some/filename.php on line 99&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;The problem is Headers are already sent, or in simple language the output is already sent to browser when your header() function is called. The best solution is not to pass headers (send html/output to browser) till the point header() function is fired.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>It’s very frustrating when you want to redirect from one page to another, and you get the error:</p>
<p><em>Warning: Cannot modify header information – headers already sent by (output started at /some/filename.php:12) in /some/filename.php on line 99</em></p>
<p>The problem is Headers are already sent, or in simple language the output is already sent to browser when your header() function is called. The best solution is not to pass headers (send html/output to browser) till the point header() function is fired.</p>
<p>Another way is to use output buffering. Without output buffering (the default), your HTML is sent to the browser in pieces as PHP processes through your script. With output buffering, your HTML is stored in a variable and sent to the browser as one piece at the end of your script. For using this method, you have to start your file with <em>ob_start();</em> so that output gets buffered.</p>
<p>But what if you don’t care whether the output is sent or not, you anyway want the redirect to work? This simple function will do the trick for you. It will check if headers are not sent, then it will call the PHP’s header function to redirect. But if the headers are sent, it will use Javascript to redirect to the URL you want.</p>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">redirect</span>(<span style="color:#b8860b">$url</span>)  
</span></span><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span> (<span style="color:#666">!</span>headers_sent())  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> header(‘Location<span style="color:#666">:</span> ‘<span style="color:#666">.</span><span style="color:#b8860b">$url</span>);  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">exit</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">else</span>  
</span></span><span style="display:flex;"><span> {  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">echo</span> ‘<span style="color:#666">&lt;</span>script type<span style="color:#666">=</span><span style="color:#b44">&#34;text/javascript&#34;</span><span style="color:#666">&gt;</span><span style="color:#b44">&#39;;
</span></span></span><span style="display:flex;"><span><span style="color:#b44">        echo &#39;</span>window<span style="color:#666">.</span>location<span style="color:#666">.</span>href<span style="color:#666">=</span><span style="color:#b44">&#34;&#39;.</span><span style="color:#b68;font-weight:bold">$url</span><span style="color:#b44">.&#39;&#34;</span>;<span style="color:#b44">&#39;;
</span></span></span><span style="display:flex;"><span><span style="color:#b44">        echo &#39;</span><span style="color:#666">&lt;/</span>script<span style="color:#666">&gt;</span>‘;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">echo</span> ‘<span style="color:#666">&lt;</span>noscript<span style="color:#666">&gt;</span>‘;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">echo</span> ‘<span style="color:#666">&lt;</span>meta content<span style="color:#666">=</span><span style="color:#b44">&#34;0;url=&#39;.</span><span style="color:#b68;font-weight:bold">$url</span><span style="color:#b44">.&#39;&#34;</span> http<span style="color:#666">-</span>equiv<span style="color:#666">=</span><span style="color:#b44">&#34;refresh&#34;</span><span style="color:#666">&gt;&lt;/</span>meta<span style="color:#666">&gt;</span>‘;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">echo</span> ‘<span style="color:#666">&lt;/</span>noscript<span style="color:#666">&gt;</span>‘;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">exit</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
]]></content:encoded>
    </item>
    <item>
      <title>Buy: Pinterest Auto Pin images right from your website!</title>
      <link>http://localhost:1313/buy-pinterest-auto-pin-images-right-from-your-website/</link>
      <pubDate>Fri, 02 Nov 2012 12:00:53 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/buy-pinterest-auto-pin-images-right-from-your-website/</guid>
      <description>&lt;p&gt;Pinterest has yet not released their API which can help developers to integrate to the system and autopin images directly from their website/blog. Yet, I have created an Pinterest API in PHP which will post your image to Pinterest with message, link and price.&lt;/p&gt;&#xA;&lt;p&gt;Just after entering correct email and password of your pinterest account, and providing Image URL, Message and link URL, you will be shown the list of boards you have, so that you can select any one and pin the image on it right from your website! Sounds interesting!? Here is the image that will help you understand how it works:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Pinterest has yet not released their API which can help developers to integrate to the system and autopin images directly from their website/blog. Yet, I have created an Pinterest API in PHP which will post your image to Pinterest with message, link and price.</p>
<p>Just after entering correct email and password of your pinterest account, and providing Image URL, Message and link URL, you will be shown the list of boards you have, so that you can select any one and pin the image on it right from your website! Sounds interesting!? Here is the image that will help you understand how it works:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Nothing complicated, very easy to use, one click to pin your image directly to pinterest, click below button to buy it now! <a href="http://ka.lpe.sh/contact-me">Contact me</a> for any questions!<br>
Price: <!-- raw HTML omitted -->$49<!-- raw HTML omitted --> $39 <!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><img src="https://www.paypalobjects.com/en_GB/i/scr/pixel.gif" alt=""></p>
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    <item>
      <title>PHP: is_int() vs is_numeric()</title>
      <link>http://localhost:1313/php-is_int-vs-is_numeric/</link>
      <pubDate>Wed, 17 Oct 2012 14:53:07 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/php-is_int-vs-is_numeric/</guid>
      <description>&lt;p&gt;Both of the functions looks similar, but there is a difference, which can screw your time if you’re not aware of it and using blindly! is_int() seems same to is_numeric(), checking the variable if it’s integer or not, but it’s not exactly what you’re thinking.&lt;/p&gt;&#xA;&lt;p&gt;The key difference between these two functions is that is_int() checks the &lt;strong&gt;type&lt;/strong&gt; of variable, while is_numeric() checks the &lt;strong&gt;value&lt;/strong&gt; of the variable.&lt;/p&gt;&#xA;&lt;p&gt;From PHP.net,&lt;br&gt;&#xA;&lt;em&gt;is_int:&lt;/em&gt; Find whether the type of a variable is integer&lt;br&gt;&#xA;&lt;em&gt;is_numeric:&lt;/em&gt; Finds whether a variable is a number or a numeric string&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Both of the functions looks similar, but there is a difference, which can screw your time if you’re not aware of it and using blindly! is_int() seems same to is_numeric(), checking the variable if it’s integer or not, but it’s not exactly what you’re thinking.</p>
<p>The key difference between these two functions is that is_int() checks the <strong>type</strong> of variable, while is_numeric() checks the <strong>value</strong> of the variable.</p>
<p>From PHP.net,<br>
<em>is_int:</em> Find whether the type of a variable is integer<br>
<em>is_numeric:</em> Finds whether a variable is a number or a numeric string</p>
<p>So, if you check something like:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b8860b">$var</span> <span style="color:#666">=</span> “123”;</span></span></code></pre></div><br>
$var is a string of numbers, not an integer value.<br>
Therefor <em>is_int should return false</em> as it’s not an integer, it’s a string.<br>
However it is a numeric string, so hence <em>is_numeric should return true</em>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento, PHP: Merging/Joining two objects collections</title>
      <link>http://localhost:1313/magento-php-merging/joining-two-objects-collections/</link>
      <pubDate>Sun, 29 Jul 2012 21:10:16 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-php-merging/joining-two-objects-collections/</guid>
      <description>&lt;p&gt;It’s easy to merge two arrays with array_merge, but have you came across to merge two objects? It’s not that easy in Magento. You need to convert it to array first, merge them, and convert it to the object again to make it work. If you have two objects of different class, then it’s really difficult job to merge as both will not be compatible. If they are from similar classes or share same elements inside, then it’s not that tricky.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>It’s easy to merge two arrays with array_merge, but have you came across to merge two objects? It’s not that easy in Magento. You need to convert it to array first, merge them, and convert it to the object again to make it work. If you have two objects of different class, then it’s really difficult job to merge as both will not be compatible. If they are from similar classes or share same elements inside, then it’s not that tricky.</p>
<p>If you want to add collection2 in collection1 (in Magento), where collection1 will be a merged form of both, you can do so by:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a2f;font-weight:bold">foreach</span>(<span style="color:#b8860b">$collection2</span> <span style="color:#a2f;font-weight:bold">as</span> <span style="color:#b8860b">$coll</span>) {  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$collection1</span><span style="color:#666">-&gt;</span><span style="color:#b44">addItem</span>(<span style="color:#b8860b">$coll</span>);  
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div></p>
<p>In core PHP, it’s quite easy in this way:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b8860b">$merged_obj</span> <span style="color:#666">=</span> (object) array_merge( (<span style="color:#a2f;font-weight:bold">array</span>) <span style="color:#b8860b">$collection1</span>, (<span style="color:#a2f;font-weight:bold">array</span>) <span style="color:#b8860b">$collection2</span> );</span></span></code></pre></div></p>
<p>In Magento, converting collection to array is easy:<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b8860b">$arr</span> <span style="color:#666">=</span> <span style="color:#b8860b">$collection</span><span style="color:#666">-&gt;</span><span style="color:#b44">toArray</span>();</span></span></code></pre></div><br>
while vice versa is difficult as Magento doesn’t have any built-in method to do so.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Convert PHP XML to JSON, XML to Array, JSON to Array</title>
      <link>http://localhost:1313/convert-php-xml-to-json-xml-to-array-json-to-array/</link>
      <pubDate>Thu, 26 Jul 2012 19:02:00 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/convert-php-xml-to-json-xml-to-array-json-to-array/</guid>
      <description>&lt;p&gt;Converting PHP XML to JSON, XML to Array, JSON to Array is very difficult task for some people. But, in PHP, believe me it’s very easy. One line of code each! Don’t believe? Just check out the code below and test it yourself!&lt;br&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$xml&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; simplexml_load_string(&lt;span style=&#34;color:#b8860b&#34;&gt;$xmlstring&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$json&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; json_encode(&lt;span style=&#34;color:#b8860b&#34;&gt;$xml&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; json_decode(&lt;span style=&#34;color:#b8860b&#34;&gt;$json&lt;/span&gt;,&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&#xA;Happy Coding!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Converting PHP XML to JSON, XML to Array, JSON to Array is very difficult task for some people. But, in PHP, believe me it’s very easy. One line of code each! Don’t believe? Just check out the code below and test it yourself!<br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#b8860b">$xml</span> <span style="color:#666">=</span> simplexml_load_string(<span style="color:#b8860b">$xmlstring</span>);  
</span></span><span style="display:flex;"><span><span style="color:#b8860b">$json</span> <span style="color:#666">=</span> json_encode(<span style="color:#b8860b">$xml</span>);  
</span></span><span style="display:flex;"><span><span style="color:#b8860b">$arr</span> <span style="color:#666">=</span> json_decode(<span style="color:#b8860b">$json</span>,<span style="color:#a2f;font-weight:bold">true</span>);</span></span></code></pre></div><br>
Happy Coding!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento: Get sentence case from camel case string</title>
      <link>http://localhost:1313/magento-get-sentence-case-from-camel-case-string/</link>
      <pubDate>Wed, 18 Apr 2012 17:31:06 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento-get-sentence-case-from-camel-case-string/</guid>
      <description>&lt;p&gt;Magento has pre-defined methods for getters and setters which will convert camelcase string to underscore formatted string.&lt;br&gt;&#xA;Example, Magento will convert &lt;em&gt;thisIsDummy&lt;/em&gt; to &lt;em&gt;this_is_dummy&lt;/em&gt; using it’s method _underscore which is available at Varien_Object class.&lt;/p&gt;&#xA;&lt;p&gt;If you want to convert &lt;strong&gt;Camel case string to Sentence case&lt;/strong&gt; (this may sound weird, but we got the requirement),&lt;br&gt;&#xA;Example, from &lt;em&gt;thisIsDummy&lt;/em&gt; to &lt;em&gt;This Is Dummy&lt;/em&gt;, below method will help you to do so:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;camelToSentence&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$word&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(isset(&lt;span style=&#34;color:#b8860b&#34;&gt;$word&lt;/span&gt;)) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$result&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ucwords(preg_replace(‘&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;)([A&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;Z])&lt;span style=&#34;color:#666&#34;&gt;/&lt;/span&gt;’, “&lt;span style=&#34;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;”, &lt;span style=&#34;color:#b8860b&#34;&gt;$word&lt;/span&gt;));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$result&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<p>Magento has pre-defined methods for getters and setters which will convert camelcase string to underscore formatted string.<br>
Example, Magento will convert <em>thisIsDummy</em> to <em>this_is_dummy</em> using it’s method _underscore which is available at Varien_Object class.</p>
<p>If you want to convert <strong>Camel case string to Sentence case</strong> (this may sound weird, but we got the requirement),<br>
Example, from <em>thisIsDummy</em> to <em>This Is Dummy</em>, below method will help you to do so:</p>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">camelToSentence</span>(<span style="color:#b8860b">$word</span>) {  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(isset(<span style="color:#b8860b">$word</span>)) {  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$result</span> <span style="color:#666">=</span> ucwords(preg_replace(‘<span style="color:#666">/</span>(<span style="color:#666">.</span>)([A<span style="color:#666">-</span>Z])<span style="color:#666">/</span>’, “<span style="">$</span><span style="color:#666">1</span> <span style="">$</span><span style="color:#666">2</span>”, <span style="color:#b8860b">$word</span>));  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">return</span> <span style="color:#b8860b">$result</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> }</span></span></code></pre></div>
]]></content:encoded>
    </item>
    <item>
      <title>PHP Convert SimpleXML object to Array</title>
      <link>http://localhost:1313/php-convert-simplexml-object-to-array/</link>
      <pubDate>Wed, 29 Feb 2012 12:34:47 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/php-convert-simplexml-object-to-array/</guid>
      <description>&lt;p&gt;In PHP, if you want to convert your xml data to array for looping and displaying purpose, it sometimes becomes tedious. If you already have a SimpleXML class and want to convert XML to Array without any notices, warnings and recursively preparing the array, here is the method that will do so without any modifications needed. This will work by pasting this in your class file, if you are not using object oriented approach, you will have to remove “public” and “$this-&amp;gt;” from this function.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In PHP, if you want to convert your xml data to array for looping and displaying purpose, it sometimes becomes tedious. If you already have a SimpleXML class and want to convert XML to Array without any notices, warnings and recursively preparing the array, here is the method that will do so without any modifications needed. This will work by pasting this in your class file, if you are not using object oriented approach, you will have to remove “public” and “$this-&gt;” from this function.</p>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">simpleXMLToArray</span>(SimpleXMLElement <span style="color:#b8860b">$xml</span>,<span style="color:#b8860b">$attributesKey</span><span style="color:#666">=</span><span style="color:#a2f;font-weight:bold">null</span>,<span style="color:#b8860b">$childrenKey</span><span style="color:#666">=</span><span style="color:#a2f;font-weight:bold">null</span>,<span style="color:#b8860b">$valueKey</span><span style="color:#666">=</span><span style="color:#a2f;font-weight:bold">null</span>){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$childrenKey</span> <span style="color:#666">&amp;</span>amp;<span style="color:#666">&amp;</span>amp; <span style="color:#666">!</span>is_string(<span style="color:#b8860b">$childrenKey</span>)){<span style="color:#b8860b">$childrenKey</span> <span style="color:#666">=</span> ‘<span style="color:#666">@</span>children’;}  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$attributesKey</span> <span style="color:#666">&amp;</span>amp;<span style="color:#666">&amp;</span>amp; <span style="color:#666">!</span>is_string(<span style="color:#b8860b">$attributesKey</span>)){<span style="color:#b8860b">$attributesKey</span> <span style="color:#666">=</span> ‘<span style="color:#666">@</span>attributes’;}  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$valueKey</span> <span style="color:#666">&amp;</span>amp;<span style="color:#666">&amp;</span>amp; <span style="color:#666">!</span>is_string(<span style="color:#b8860b">$valueKey</span>)){<span style="color:#b8860b">$valueKey</span> <span style="color:#666">=</span> ‘<span style="color:#666">@</span>values’;}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$return</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$name</span> <span style="color:#666">=</span> <span style="color:#b8860b">$xml</span><span style="color:#666">-&gt;</span><span style="color:#b44">getName</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$_value</span> <span style="color:#666">=</span> trim((string)<span style="color:#b8860b">$xml</span>);  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#666">!</span>strlen(<span style="color:#b8860b">$_value</span>)){<span style="color:#b8860b">$_value</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">null</span>;};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$_value</span><span style="color:#666">!==</span><span style="color:#a2f;font-weight:bold">null</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$valueKey</span>){<span style="color:#b8860b">$return</span>[<span style="color:#b8860b">$valueKey</span>] <span style="color:#666">=</span> <span style="color:#b8860b">$_value</span>;}  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">else</span>{<span style="color:#b8860b">$return</span> <span style="color:#666">=</span> <span style="color:#b8860b">$_value</span>;}  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$first</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">true</span>;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">foreach</span>(<span style="color:#b8860b">$xml</span><span style="color:#666">-&gt;</span><span style="color:#b44">children</span>() <span style="color:#a2f;font-weight:bold">as</span> <span style="color:#b8860b">$elementName</span> <span style="color:#666">=&gt;</span> <span style="color:#b8860b">$child</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$value</span> <span style="color:#666">=</span> <span style="color:#b8860b">$this</span><span style="color:#666">-&gt;</span><span style="color:#b44">simpleXMLToArray</span>(<span style="color:#b8860b">$child</span>,<span style="color:#b8860b">$attributesKey</span>, <span style="color:#b8860b">$childrenKey</span>,<span style="color:#b8860b">$valueKey</span>);  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(isset(<span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>])){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(is_array(<span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>])){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$first</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$temp</span> <span style="color:#666">=</span> <span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>];  
</span></span><span style="display:flex;"><span> unset(<span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>]);  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>][] <span style="color:#666">=</span> <span style="color:#b8860b">$temp</span>;  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$first</span><span style="color:#666">=</span><span style="color:#a2f;font-weight:bold">false</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>][] <span style="color:#666">=</span> <span style="color:#b8860b">$value</span>;  
</span></span><span style="display:flex;"><span> }<span style="color:#a2f;font-weight:bold">else</span>{  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>] <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>(<span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>],<span style="color:#b8860b">$value</span>);  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">else</span>{  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span>[<span style="color:#b8860b">$elementName</span>] <span style="color:#666">=</span> <span style="color:#b8860b">$value</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$children</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$childrenKey</span>){<span style="color:#b8860b">$return</span>[<span style="color:#b8860b">$childrenKey</span>] <span style="color:#666">=</span> <span style="color:#b8860b">$children</span>;}  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">else</span>{<span style="color:#b8860b">$return</span> <span style="color:#666">=</span> array_merge(<span style="color:#b8860b">$return</span>,<span style="color:#b8860b">$children</span>);}  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$attributes</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">foreach</span>(<span style="color:#b8860b">$xml</span><span style="color:#666">-&gt;</span><span style="color:#b44">attributes</span>() <span style="color:#a2f;font-weight:bold">as</span> <span style="color:#b8860b">$name</span><span style="color:#666">=&gt;</span><span style="color:#b8860b">$value</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$attributes</span>[<span style="color:#b8860b">$name</span>] <span style="color:#666">=</span> trim(<span style="color:#b8860b">$value</span>);  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$attributes</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$attributesKey</span>){<span style="color:#b8860b">$return</span>[<span style="color:#b8860b">$attributesKey</span>] <span style="color:#666">=</span> <span style="color:#b8860b">$attributes</span>;}  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">else</span>{<span style="color:#b8860b">$return</span> <span style="color:#666">=</span> array_merge(<span style="color:#b8860b">$return</span>, <span style="color:#b8860b">$attributes</span>);}  
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">return</span> <span style="color:#b8860b">$return</span>;  
</span></span><span style="display:flex;"><span>}  
</span></span></code></pre></div>
<p>Hope this helps.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Magento/PHP: Convert your XML Object to Array</title>
      <link>http://localhost:1313/magento/php-convert-your-xml-object-to-array/</link>
      <pubDate>Sun, 12 Feb 2012 06:24:25 +0000</pubDate><author>k@lpe.sh (Kalpesh Mehta)</author>
      <guid>http://localhost:1313/magento/php-convert-your-xml-object-to-array/</guid>
      <description>&lt;p&gt;While developing shipment tracking using SimpleXML in magento, I came accross the requirement where I have to get all the XML tags as keys and all the data inside XML tags as values in array. Means I wanted to convert XML to an Array where I can display all the information in some decorative format.&lt;/p&gt;&#xA;&lt;p&gt;So here is how I converted XML to Array without any kind of hardcoding.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PHP class method to convert xml to array&lt;/strong&gt;&lt;br&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#00a000&#34;&gt;convertXmlObjToArr&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$obj&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;amp;&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$children&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$obj&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;children&lt;/span&gt;();  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$executed&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;false&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#b8860b&#34;&gt;$children&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$node&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;null&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;!==&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;null&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; count(&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;convertXmlObjToArr&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$node&lt;/span&gt;, &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;][&lt;span style=&#34;color:#b8860b&#34;&gt;$i&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt;{  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$tmp&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;];  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;array&lt;/span&gt;();  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;][&lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$tmp&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; count(&lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;convertXmlObjToArr&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$node&lt;/span&gt;, &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;][&lt;span style=&#34;color:#b8860b&#34;&gt;$i&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;else&lt;/span&gt;{  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;array&lt;/span&gt;();  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;convertXmlObjToArr&lt;/span&gt;(&lt;span style=&#34;color:#b8860b&#34;&gt;$node&lt;/span&gt;, &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt;[&lt;span style=&#34;color:#b8860b&#34;&gt;$elementName&lt;/span&gt;]);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$executed&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;true&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#b8860b&#34;&gt;$executed&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;amp;&lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;amp;&lt;span style=&#34;color:#b8860b&#34;&gt;$children&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b44&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt;””){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b8860b&#34;&gt;$arr&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; (String)&lt;span style=&#34;color:#b8860b&#34;&gt;$obj&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;return&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&#xA;Hope this helps!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>While developing shipment tracking using SimpleXML in magento, I came accross the requirement where I have to get all the XML tags as keys and all the data inside XML tags as values in array. Means I wanted to convert XML to an Array where I can display all the information in some decorative format.</p>
<p>So here is how I converted XML to Array without any kind of hardcoding.</p>
<p><strong>PHP class method to convert xml to array</strong><br>




<div class="highlight"><pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#a2f;font-weight:bold">public</span> <span style="color:#a2f;font-weight:bold">function</span> <span style="color:#00a000">convertXmlObjToArr</span>(<span style="color:#b8860b">$obj</span>, <span style="color:#666">&amp;</span>amp;<span style="color:#b8860b">$arr</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$children</span> <span style="color:#666">=</span> <span style="color:#b8860b">$obj</span><span style="color:#666">-&gt;</span><span style="color:#b44">children</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$executed</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">false</span>;  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">foreach</span> (<span style="color:#b8860b">$children</span> <span style="color:#a2f;font-weight:bold">as</span> <span style="color:#b8860b">$elementName</span> <span style="color:#666">=&gt;</span> <span style="color:#b8860b">$node</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>]<span style="color:#666">!=</span><span style="color:#a2f;font-weight:bold">null</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>][<span style="color:#666">0</span>]<span style="color:#666">!==</span><span style="color:#a2f;font-weight:bold">null</span>){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$i</span> <span style="color:#666">=</span> count(<span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>]);  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$this</span><span style="color:#666">-&gt;</span><span style="color:#b44">convertXmlObjToArr</span>(<span style="color:#b8860b">$node</span>, <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>][<span style="color:#b8860b">$i</span>]);  
</span></span><span style="display:flex;"><span> }<span style="color:#a2f;font-weight:bold">else</span>{  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$tmp</span> <span style="color:#666">=</span> <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>];  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>] <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>][<span style="color:#666">0</span>] <span style="color:#666">=</span> <span style="color:#b8860b">$tmp</span>;  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$i</span> <span style="color:#666">=</span> count(<span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>]);  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$this</span><span style="color:#666">-&gt;</span><span style="color:#b44">convertXmlObjToArr</span>(<span style="color:#b8860b">$node</span>, <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>][<span style="color:#b8860b">$i</span>]);  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> }<span style="color:#a2f;font-weight:bold">else</span>{  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>] <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">array</span>();  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$this</span><span style="color:#666">-&gt;</span><span style="color:#b44">convertXmlObjToArr</span>(<span style="color:#b8860b">$node</span>, <span style="color:#b8860b">$arr</span>[<span style="color:#b8860b">$elementName</span>]);  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$executed</span> <span style="color:#666">=</span> <span style="color:#a2f;font-weight:bold">true</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">if</span>(<span style="color:#666">!</span><span style="color:#b8860b">$executed</span><span style="color:#666">&amp;</span>amp;<span style="color:#666">&amp;</span>amp;<span style="color:#b8860b">$children</span><span style="color:#666">-&gt;</span><span style="color:#b44">getName</span>()<span style="color:#666">==</span>””){  
</span></span><span style="display:flex;"><span> <span style="color:#b8860b">$arr</span> <span style="color:#666">=</span> (String)<span style="color:#b8860b">$obj</span>;  
</span></span><span style="display:flex;"><span> }  
</span></span><span style="display:flex;"><span> <span style="color:#a2f;font-weight:bold">return</span>;  
</span></span><span style="display:flex;"><span> }</span></span></code></pre></div><br>
Hope this helps!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
